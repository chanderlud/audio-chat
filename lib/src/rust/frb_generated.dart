// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/contact.dart';
import 'api/crypto.dart';
import 'api/error.dart';
import 'api/logger.dart';
import 'api/overlay/overlay.dart';
import 'api/player.dart';
import 'api/telepathy.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => 617117851;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'telepathy',
    ioDirectory: 'rust/telepathy/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Capabilities> crateApiTelepathyCapabilitiesDefault();

  List<String> crateApiTelepathyCapabilitiesDevices(
      {required Capabilities that});

  List<String> crateApiTelepathyCapabilitiesEncoders(
      {required Capabilities that});

  List<(String, Uint8List)> crateApiTelepathyChatMessageAttachments(
      {required ChatMessage that});

  String crateApiTelepathyChatMessageAutoAccessorGetText(
      {required ChatMessage that});

  void crateApiTelepathyChatMessageAutoAccessorSetText(
      {required ChatMessage that, required String text});

  void crateApiTelepathyChatMessageClearAttachments(
      {required ChatMessage that});

  bool crateApiTelepathyChatMessageIsSender(
      {required ChatMessage that, required String identity});

  String crateApiTelepathyChatMessageTime({required ChatMessage that});

  CodecConfig crateApiTelepathyCodecConfigNew(
      {required bool enabled, required bool vbr, required double residualBits});

  void crateApiTelepathyCodecConfigSetEnabled(
      {required CodecConfig that, required bool enabled});

  void crateApiTelepathyCodecConfigSetResidualBits(
      {required CodecConfig that, required double residualBits});

  void crateApiTelepathyCodecConfigSetVbr(
      {required CodecConfig that, required bool vbr});

  (bool, bool, double) crateApiTelepathyCodecConfigToValues(
      {required CodecConfig that});

  Contact crateApiContactContactFromParts(
      {required String id, required String nickname, required String peerId});

  String crateApiContactContactId({required Contact that});

  bool crateApiContactContactIdEq(
      {required Contact that, required List<int> id});

  Contact crateApiContactContactNew(
      {required String nickname, required String peerId});

  String crateApiContactContactNickname({required Contact that});

  String crateApiContactContactPeerId({required Contact that});

  Contact crateApiContactContactPubClone({required Contact that});

  void crateApiContactContactSetNickname(
      {required Contact that, required String nickname});

  Future<void> crateApiTelepathyDartNotifyNotified({required DartNotify that});

  void crateApiTelepathyDartNotifyNotify({required DartNotify that});

  Future<String> crateApiTelepathyNetworkConfigGetRelayAddress(
      {required NetworkConfig that});

  Future<String> crateApiTelepathyNetworkConfigGetRelayId(
      {required NetworkConfig that});

  NetworkConfig crateApiTelepathyNetworkConfigNew(
      {required String relayAddress, required String relayId});

  Future<void> crateApiTelepathyNetworkConfigSetRelayAddress(
      {required NetworkConfig that, required String relayAddress});

  Future<void> crateApiTelepathyNetworkConfigSetRelayId(
      {required NetworkConfig that, required String relayId});

  Future<void> crateApiOverlayOverlayOverlayDisable({required Overlay that});

  Future<void> crateApiOverlayOverlayOverlayEnable({required Overlay that});

  Future<void> crateApiOverlayOverlayOverlayHide({required Overlay that});

  Future<void> crateApiOverlayOverlayOverlayMoveOverlay(
      {required Overlay that,
      required int x,
      required int y,
      required int width,
      required int height});

  Future<Overlay> crateApiOverlayOverlayOverlayNew(
      {required bool enabled,
      required int x,
      required int y,
      required int width,
      required int height,
      required int fontHeight,
      required int backgroundColor,
      required int fontColor});

  (int, int) crateApiOverlayOverlayOverlayScreenResolution(
      {required Overlay that});

  Future<void> crateApiOverlayOverlayOverlaySetBackgroundColor(
      {required Overlay that, required int backgroundColor});

  Future<void> crateApiOverlayOverlayOverlaySetFontColor(
      {required Overlay that, required int fontColor});

  Future<void> crateApiOverlayOverlayOverlaySetFontHeight(
      {required Overlay that, required int height});

  Future<void> crateApiOverlayOverlayOverlayShow({required Overlay that});

  int crateApiTelepathyRecordingConfigBitrate({required RecordingConfig that});

  String crateApiTelepathyRecordingConfigDevice(
      {required RecordingConfig that});

  String crateApiTelepathyRecordingConfigEncoder(
      {required RecordingConfig that});

  int crateApiTelepathyRecordingConfigFramerate(
      {required RecordingConfig that});

  int? crateApiTelepathyRecordingConfigHeight({required RecordingConfig that});

  Future<Capabilities> crateApiTelepathyScreenshareConfigCapabilities(
      {required ScreenshareConfig that});

  Future<ScreenshareConfig> crateApiTelepathyScreenshareConfigDefault();

  Future<ScreenshareConfig> crateApiTelepathyScreenshareConfigNew(
      {required String configStr});

  Future<RecordingConfig?> crateApiTelepathyScreenshareConfigRecordingConfig(
      {required ScreenshareConfig that});

  String crateApiTelepathyScreenshareConfigToString(
      {required ScreenshareConfig that});

  Future<void> crateApiTelepathyScreenshareConfigUpdateRecordingConfig(
      {required ScreenshareConfig that,
      required String encoder,
      required String device,
      required int bitrate,
      required int framerate,
      int? height});

  void crateApiPlayerSoundHandleCancel({required SoundHandle that});

  ArcHost crateApiPlayerSoundPlayerHost({required SoundPlayer that});

  SoundPlayer crateApiPlayerSoundPlayerNew({required double outputVolume});

  Future<SoundHandle> crateApiPlayerSoundPlayerPlay(
      {required SoundPlayer that, required List<int> bytes});

  Future<void> crateApiPlayerSoundPlayerUpdateOutputDevice(
      {required SoundPlayer that, String? name});

  void crateApiPlayerSoundPlayerUpdateOutputVolume(
      {required SoundPlayer that, required double volume});

  Future<void> crateApiTelepathyTelepathyAudioTest({required Telepathy that});

  ChatMessage crateApiTelepathyTelepathyBuildChat(
      {required Telepathy that,
      required Contact contact,
      required String text,
      required List<(String, Uint8List)> attachments});

  void crateApiTelepathyTelepathyEndCall({required Telepathy that});

  Future<void> crateApiTelepathyTelepathyJoinRoom(
      {required Telepathy that, required List<String> memberStrings});

  Future<(List<String>, List<String>)> crateApiTelepathyTelepathyListDevices(
      {required Telepathy that});

  Future<Telepathy> crateApiTelepathyTelepathyNew(
      {required List<int> identity,
      required ArcHost host,
      required NetworkConfig networkConfig,
      required ScreenshareConfig screenshareConfig,
      required Overlay overlay,
      required CodecConfig codecConfig,
      required FutureOr<bool> Function(String, Uint8List?, DartNotify)
          acceptCall,
      required FutureOr<void> Function(String, bool) callEnded,
      required FutureOr<Contact?> Function(Uint8List) getContact,
      required FutureOr<void> Function(bool) callState,
      required FutureOr<void> Function(String, String) sessionStatus,
      required FutureOr<void> Function(Telepathy) startSessions,
      required FutureOr<void> Function(Statistics) statistics,
      required FutureOr<void> Function(ChatMessage) messageReceived,
      required FutureOr<void> Function(bool, bool) managerActive,
      required FutureOr<void> Function(DartNotify, bool) screenshareStarted});

  Future<void> crateApiTelepathyTelepathyRestartManager(
      {required Telepathy that});

  Future<void> crateApiTelepathyTelepathySendChat(
      {required Telepathy that, required ChatMessage message});

  void crateApiTelepathyTelepathySetDeafened(
      {required Telepathy that, required bool deafened});

  void crateApiTelepathyTelepathySetDenoise(
      {required Telepathy that, required bool denoise});

  void crateApiTelepathyTelepathySetEfficiencyMode(
      {required Telepathy that, required bool enabled});

  Future<void> crateApiTelepathyTelepathySetIdentity(
      {required Telepathy that, required List<int> key});

  Future<void> crateApiTelepathyTelepathySetInputDevice(
      {required Telepathy that, String? device});

  void crateApiTelepathyTelepathySetInputVolume(
      {required Telepathy that, required double decibel});

  Future<void> crateApiTelepathyTelepathySetModel(
      {required Telepathy that, Uint8List? model});

  void crateApiTelepathyTelepathySetMuted(
      {required Telepathy that, required bool muted});

  Future<void> crateApiTelepathyTelepathySetOutputDevice(
      {required Telepathy that, String? device});

  void crateApiTelepathyTelepathySetOutputVolume(
      {required Telepathy that, required double decibel});

  void crateApiTelepathyTelepathySetPlayCustomRingtones(
      {required Telepathy that, required bool play});

  void crateApiTelepathyTelepathySetRmsThreshold(
      {required Telepathy that, required double decimal});

  void crateApiTelepathyTelepathySetSendCustomRingtone(
      {required Telepathy that, required bool send});

  Future<void> crateApiTelepathyTelepathyStartCall(
      {required Telepathy that, required Contact contact});

  Future<void> crateApiTelepathyTelepathyStartScreenshare(
      {required Telepathy that, required Contact contact});

  Future<void> crateApiTelepathyTelepathyStartSession(
      {required Telepathy that, required Contact contact});

  Future<void> crateApiTelepathyTelepathyStopSession(
      {required Telepathy that, required Contact contact});

  Stream<String> crateApiLoggerCreateLogStream();

  (String, Uint8List) crateApiCryptoGenerateKeys();

  Future<void> crateApiLoggerInitLogger();

  Future<void> crateApiPlayerLoadRingtone({required String path});

  void crateApiLoggerRustSetUp();

  Stream<String> crateApiLoggerSendToDartLoggerSetStreamSink();

  Future<Statistics> crateApiTelepathyStatisticsDefault();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcHost;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcHost;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcHostPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Capabilities;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Capabilities;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CapabilitiesPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChatMessage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChatMessage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChatMessagePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CodecConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CodecConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CodecConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Contact;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Contact;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ContactPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DartNotify;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DartNotify;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DartNotifyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NetworkConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NetworkConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NetworkConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Overlay;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Overlay;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OverlayPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RecordingConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RecordingConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RecordingConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ScreenshareConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ScreenshareConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ScreenshareConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SoundHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundPlayer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SoundPlayerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Telepathy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Telepathy;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TelepathyPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Capabilities> crateApiTelepathyCapabilitiesDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyCapabilitiesDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyCapabilitiesDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "Capabilities_default",
        argNames: [],
      );

  @override
  List<String> crateApiTelepathyCapabilitiesDevices(
      {required Capabilities that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyCapabilitiesDevicesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyCapabilitiesDevicesConstMeta =>
      const TaskConstMeta(
        debugName: "Capabilities_devices",
        argNames: ["that"],
      );

  @override
  List<String> crateApiTelepathyCapabilitiesEncoders(
      {required Capabilities that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyCapabilitiesEncodersConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyCapabilitiesEncodersConstMeta =>
      const TaskConstMeta(
        debugName: "Capabilities_encoders",
        argNames: ["that"],
      );

  @override
  List<(String, Uint8List)> crateApiTelepathyChatMessageAttachments(
      {required ChatMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_record_string_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyChatMessageAttachmentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyChatMessageAttachmentsConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_attachments",
        argNames: ["that"],
      );

  @override
  String crateApiTelepathyChatMessageAutoAccessorGetText(
      {required ChatMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyChatMessageAutoAccessorGetTextConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyChatMessageAutoAccessorGetTextConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_auto_accessor_get_text",
        argNames: ["that"],
      );

  @override
  void crateApiTelepathyChatMessageAutoAccessorSetText(
      {required ChatMessage that, required String text}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        sse_encode_String(text, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyChatMessageAutoAccessorSetTextConstMeta,
      argValues: [that, text],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyChatMessageAutoAccessorSetTextConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_auto_accessor_set_text",
        argNames: ["that", "text"],
      );

  @override
  void crateApiTelepathyChatMessageClearAttachments(
      {required ChatMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyChatMessageClearAttachmentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyChatMessageClearAttachmentsConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_clear_attachments",
        argNames: ["that"],
      );

  @override
  bool crateApiTelepathyChatMessageIsSender(
      {required ChatMessage that, required String identity}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        sse_encode_String(identity, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyChatMessageIsSenderConstMeta,
      argValues: [that, identity],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyChatMessageIsSenderConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_is_sender",
        argNames: ["that", "identity"],
      );

  @override
  String crateApiTelepathyChatMessageTime({required ChatMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyChatMessageTimeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyChatMessageTimeConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_time",
        argNames: ["that"],
      );

  @override
  CodecConfig crateApiTelepathyCodecConfigNew(
      {required bool enabled,
      required bool vbr,
      required double residualBits}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(enabled, serializer);
        sse_encode_bool(vbr, serializer);
        sse_encode_f_32(residualBits, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyCodecConfigNewConstMeta,
      argValues: [enabled, vbr, residualBits],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyCodecConfigNewConstMeta =>
      const TaskConstMeta(
        debugName: "CodecConfig_new",
        argNames: ["enabled", "vbr", "residualBits"],
      );

  @override
  void crateApiTelepathyCodecConfigSetEnabled(
      {required CodecConfig that, required bool enabled}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyCodecConfigSetEnabledConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyCodecConfigSetEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "CodecConfig_set_enabled",
        argNames: ["that", "enabled"],
      );

  @override
  void crateApiTelepathyCodecConfigSetResidualBits(
      {required CodecConfig that, required double residualBits}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
            that, serializer);
        sse_encode_f_32(residualBits, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyCodecConfigSetResidualBitsConstMeta,
      argValues: [that, residualBits],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyCodecConfigSetResidualBitsConstMeta =>
      const TaskConstMeta(
        debugName: "CodecConfig_set_residual_bits",
        argNames: ["that", "residualBits"],
      );

  @override
  void crateApiTelepathyCodecConfigSetVbr(
      {required CodecConfig that, required bool vbr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
            that, serializer);
        sse_encode_bool(vbr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyCodecConfigSetVbrConstMeta,
      argValues: [that, vbr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyCodecConfigSetVbrConstMeta =>
      const TaskConstMeta(
        debugName: "CodecConfig_set_vbr",
        argNames: ["that", "vbr"],
      );

  @override
  (bool, bool, double) crateApiTelepathyCodecConfigToValues(
      {required CodecConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_bool_bool_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyCodecConfigToValuesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyCodecConfigToValuesConstMeta =>
      const TaskConstMeta(
        debugName: "CodecConfig_to_values",
        argNames: ["that"],
      );

  @override
  Contact crateApiContactContactFromParts(
      {required String id, required String nickname, required String peerId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_String(nickname, serializer);
        sse_encode_String(peerId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiContactContactFromPartsConstMeta,
      argValues: [id, nickname, peerId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContactContactFromPartsConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_from_parts",
        argNames: ["id", "nickname", "peerId"],
      );

  @override
  String crateApiContactContactId({required Contact that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContactContactIdConstMeta => const TaskConstMeta(
        debugName: "Contact_id",
        argNames: ["that"],
      );

  @override
  bool crateApiContactContactIdEq(
      {required Contact that, required List<int> id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        sse_encode_list_prim_u_8_loose(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactIdEqConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContactContactIdEqConstMeta => const TaskConstMeta(
        debugName: "Contact_id_eq",
        argNames: ["that", "id"],
      );

  @override
  Contact crateApiContactContactNew(
      {required String nickname, required String peerId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(nickname, serializer);
        sse_encode_String(peerId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiContactContactNewConstMeta,
      argValues: [nickname, peerId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContactContactNewConstMeta => const TaskConstMeta(
        debugName: "Contact_new",
        argNames: ["nickname", "peerId"],
      );

  @override
  String crateApiContactContactNickname({required Contact that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactNicknameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContactContactNicknameConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_nickname",
        argNames: ["that"],
      );

  @override
  String crateApiContactContactPeerId({required Contact that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactPeerIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContactContactPeerIdConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_peer_id",
        argNames: ["that"],
      );

  @override
  Contact crateApiContactContactPubClone({required Contact that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactPubCloneConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContactContactPubCloneConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_pub_clone",
        argNames: ["that"],
      );

  @override
  void crateApiContactContactSetNickname(
      {required Contact that, required String nickname}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        sse_encode_String(nickname, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactSetNicknameConstMeta,
      argValues: [that, nickname],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContactContactSetNicknameConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_set_nickname",
        argNames: ["that", "nickname"],
      );

  @override
  Future<void> crateApiTelepathyDartNotifyNotified({required DartNotify that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyDartNotifyNotifiedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyDartNotifyNotifiedConstMeta =>
      const TaskConstMeta(
        debugName: "DartNotify_notified",
        argNames: ["that"],
      );

  @override
  void crateApiTelepathyDartNotifyNotify({required DartNotify that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyDartNotifyNotifyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyDartNotifyNotifyConstMeta =>
      const TaskConstMeta(
        debugName: "DartNotify_notify",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiTelepathyNetworkConfigGetRelayAddress(
      {required NetworkConfig that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyNetworkConfigGetRelayAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyNetworkConfigGetRelayAddressConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_get_relay_address",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiTelepathyNetworkConfigGetRelayId(
      {required NetworkConfig that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyNetworkConfigGetRelayIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyNetworkConfigGetRelayIdConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_get_relay_id",
        argNames: ["that"],
      );

  @override
  NetworkConfig crateApiTelepathyNetworkConfigNew(
      {required String relayAddress, required String relayId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(relayAddress, serializer);
        sse_encode_String(relayId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyNetworkConfigNewConstMeta,
      argValues: [relayAddress, relayId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyNetworkConfigNewConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_new",
        argNames: ["relayAddress", "relayId"],
      );

  @override
  Future<void> crateApiTelepathyNetworkConfigSetRelayAddress(
      {required NetworkConfig that, required String relayAddress}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            that, serializer);
        sse_encode_String(relayAddress, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyNetworkConfigSetRelayAddressConstMeta,
      argValues: [that, relayAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyNetworkConfigSetRelayAddressConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_set_relay_address",
        argNames: ["that", "relayAddress"],
      );

  @override
  Future<void> crateApiTelepathyNetworkConfigSetRelayId(
      {required NetworkConfig that, required String relayId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            that, serializer);
        sse_encode_String(relayId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyNetworkConfigSetRelayIdConstMeta,
      argValues: [that, relayId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyNetworkConfigSetRelayIdConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_set_relay_id",
        argNames: ["that", "relayId"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayDisable({required Overlay that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayDisableConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayDisableConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_disable",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayEnable({required Overlay that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayEnableConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayEnableConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_enable",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayHide({required Overlay that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayHideConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayHideConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_hide",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayMoveOverlay(
      {required Overlay that,
      required int x,
      required int y,
      required int width,
      required int height}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        sse_encode_i_32(x, serializer);
        sse_encode_i_32(y, serializer);
        sse_encode_i_32(width, serializer);
        sse_encode_i_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayMoveOverlayConstMeta,
      argValues: [that, x, y, width, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayMoveOverlayConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_move_overlay",
        argNames: ["that", "x", "y", "width", "height"],
      );

  @override
  Future<Overlay> crateApiOverlayOverlayOverlayNew(
      {required bool enabled,
      required int x,
      required int y,
      required int width,
      required int height,
      required int fontHeight,
      required int backgroundColor,
      required int fontColor}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(enabled, serializer);
        sse_encode_i_32(x, serializer);
        sse_encode_i_32(y, serializer);
        sse_encode_i_32(width, serializer);
        sse_encode_i_32(height, serializer);
        sse_encode_i_32(fontHeight, serializer);
        sse_encode_u_32(backgroundColor, serializer);
        sse_encode_u_32(fontColor, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayNewConstMeta,
      argValues: [
        enabled,
        x,
        y,
        width,
        height,
        fontHeight,
        backgroundColor,
        fontColor
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayNewConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_new",
        argNames: [
          "enabled",
          "x",
          "y",
          "width",
          "height",
          "fontHeight",
          "backgroundColor",
          "fontColor"
        ],
      );

  @override
  (int, int) crateApiOverlayOverlayOverlayScreenResolution(
      {required Overlay that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayScreenResolutionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayScreenResolutionConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_screen_resolution",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlaySetBackgroundColor(
      {required Overlay that, required int backgroundColor}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        sse_encode_u_32(backgroundColor, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlaySetBackgroundColorConstMeta,
      argValues: [that, backgroundColor],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlaySetBackgroundColorConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_set_background_color",
        argNames: ["that", "backgroundColor"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlaySetFontColor(
      {required Overlay that, required int fontColor}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        sse_encode_u_32(fontColor, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlaySetFontColorConstMeta,
      argValues: [that, fontColor],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlaySetFontColorConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_set_font_color",
        argNames: ["that", "fontColor"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlaySetFontHeight(
      {required Overlay that, required int height}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        sse_encode_i_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlaySetFontHeightConstMeta,
      argValues: [that, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlaySetFontHeightConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_set_font_height",
        argNames: ["that", "height"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayShow({required Overlay that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayShowConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayShowConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_show",
        argNames: ["that"],
      );

  @override
  int crateApiTelepathyRecordingConfigBitrate({required RecordingConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyRecordingConfigBitrateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyRecordingConfigBitrateConstMeta =>
      const TaskConstMeta(
        debugName: "RecordingConfig_bitrate",
        argNames: ["that"],
      );

  @override
  String crateApiTelepathyRecordingConfigDevice(
      {required RecordingConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyRecordingConfigDeviceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyRecordingConfigDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "RecordingConfig_device",
        argNames: ["that"],
      );

  @override
  String crateApiTelepathyRecordingConfigEncoder(
      {required RecordingConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyRecordingConfigEncoderConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyRecordingConfigEncoderConstMeta =>
      const TaskConstMeta(
        debugName: "RecordingConfig_encoder",
        argNames: ["that"],
      );

  @override
  int crateApiTelepathyRecordingConfigFramerate(
      {required RecordingConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyRecordingConfigFramerateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyRecordingConfigFramerateConstMeta =>
      const TaskConstMeta(
        debugName: "RecordingConfig_framerate",
        argNames: ["that"],
      );

  @override
  int? crateApiTelepathyRecordingConfigHeight({required RecordingConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyRecordingConfigHeightConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyRecordingConfigHeightConstMeta =>
      const TaskConstMeta(
        debugName: "RecordingConfig_height",
        argNames: ["that"],
      );

  @override
  Future<Capabilities> crateApiTelepathyScreenshareConfigCapabilities(
      {required ScreenshareConfig that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyScreenshareConfigCapabilitiesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyScreenshareConfigCapabilitiesConstMeta =>
      const TaskConstMeta(
        debugName: "ScreenshareConfig_capabilities",
        argNames: ["that"],
      );

  @override
  Future<ScreenshareConfig> crateApiTelepathyScreenshareConfigDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyScreenshareConfigDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyScreenshareConfigDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "ScreenshareConfig_default",
        argNames: [],
      );

  @override
  Future<ScreenshareConfig> crateApiTelepathyScreenshareConfigNew(
      {required String configStr}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(configStr, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyScreenshareConfigNewConstMeta,
      argValues: [configStr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyScreenshareConfigNewConstMeta =>
      const TaskConstMeta(
        debugName: "ScreenshareConfig_new",
        argNames: ["configStr"],
      );

  @override
  Future<RecordingConfig?> crateApiTelepathyScreenshareConfigRecordingConfig(
      {required ScreenshareConfig that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyScreenshareConfigRecordingConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTelepathyScreenshareConfigRecordingConfigConstMeta =>
          const TaskConstMeta(
            debugName: "ScreenshareConfig_recording_config",
            argNames: ["that"],
          );

  @override
  String crateApiTelepathyScreenshareConfigToString(
      {required ScreenshareConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyScreenshareConfigToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyScreenshareConfigToStringConstMeta =>
      const TaskConstMeta(
        debugName: "ScreenshareConfig_to_string",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiTelepathyScreenshareConfigUpdateRecordingConfig(
      {required ScreenshareConfig that,
      required String encoder,
      required String device,
      required int bitrate,
      required int framerate,
      int? height}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
            that, serializer);
        sse_encode_String(encoder, serializer);
        sse_encode_String(device, serializer);
        sse_encode_u_32(bitrate, serializer);
        sse_encode_u_32(framerate, serializer);
        sse_encode_opt_box_autoadd_u_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta:
          kCrateApiTelepathyScreenshareConfigUpdateRecordingConfigConstMeta,
      argValues: [that, encoder, device, bitrate, framerate, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTelepathyScreenshareConfigUpdateRecordingConfigConstMeta =>
          const TaskConstMeta(
            debugName: "ScreenshareConfig_update_recording_config",
            argNames: [
              "that",
              "encoder",
              "device",
              "bitrate",
              "framerate",
              "height"
            ],
          );

  @override
  void crateApiPlayerSoundHandleCancel({required SoundHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundHandleCancelConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundHandleCancelConstMeta =>
      const TaskConstMeta(
        debugName: "SoundHandle_cancel",
        argNames: ["that"],
      );

  @override
  ArcHost crateApiPlayerSoundPlayerHost({required SoundPlayer that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerHostConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerHostConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_host",
        argNames: ["that"],
      );

  @override
  SoundPlayer crateApiPlayerSoundPlayerNew({required double outputVolume}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(outputVolume, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerNewConstMeta,
      argValues: [outputVolume],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerNewConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_new",
        argNames: ["outputVolume"],
      );

  @override
  Future<SoundHandle> crateApiPlayerSoundPlayerPlay(
      {required SoundPlayer that, required List<int> bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
            that, serializer);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerPlayConstMeta,
      argValues: [that, bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerPlayConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_play",
        argNames: ["that", "bytes"],
      );

  @override
  Future<void> crateApiPlayerSoundPlayerUpdateOutputDevice(
      {required SoundPlayer that, String? name}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
            that, serializer);
        sse_encode_opt_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerUpdateOutputDeviceConstMeta,
      argValues: [that, name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerUpdateOutputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_update_output_device",
        argNames: ["that", "name"],
      );

  @override
  void crateApiPlayerSoundPlayerUpdateOutputVolume(
      {required SoundPlayer that, required double volume}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
            that, serializer);
        sse_encode_f_32(volume, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerUpdateOutputVolumeConstMeta,
      argValues: [that, volume],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerUpdateOutputVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_update_output_volume",
        argNames: ["that", "volume"],
      );

  @override
  Future<void> crateApiTelepathyTelepathyAudioTest({required Telepathy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathyAudioTestConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyAudioTestConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_audio_test",
        argNames: ["that"],
      );

  @override
  ChatMessage crateApiTelepathyTelepathyBuildChat(
      {required Telepathy that,
      required Contact contact,
      required String text,
      required List<(String, Uint8List)> attachments}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        sse_encode_String(text, serializer);
        sse_encode_list_record_string_list_prim_u_8_strict(
            attachments, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathyBuildChatConstMeta,
      argValues: [that, contact, text, attachments],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyBuildChatConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_build_chat",
        argNames: ["that", "contact", "text", "attachments"],
      );

  @override
  void crateApiTelepathyTelepathyEndCall({required Telepathy that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathyEndCallConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyEndCallConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_end_call",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiTelepathyTelepathyJoinRoom(
      {required Telepathy that, required List<String> memberStrings}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_list_String(memberStrings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathyJoinRoomConstMeta,
      argValues: [that, memberStrings],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyJoinRoomConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_join_room",
        argNames: ["that", "memberStrings"],
      );

  @override
  Future<(List<String>, List<String>)> crateApiTelepathyTelepathyListDevices(
      {required Telepathy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_list_string_list_string,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathyListDevicesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyListDevicesConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_list_devices",
        argNames: ["that"],
      );

  @override
  Future<Telepathy> crateApiTelepathyTelepathyNew(
      {required List<int> identity,
      required ArcHost host,
      required NetworkConfig networkConfig,
      required ScreenshareConfig screenshareConfig,
      required Overlay overlay,
      required CodecConfig codecConfig,
      required FutureOr<bool> Function(String, Uint8List?, DartNotify)
          acceptCall,
      required FutureOr<void> Function(String, bool) callEnded,
      required FutureOr<Contact?> Function(Uint8List) getContact,
      required FutureOr<void> Function(bool) callState,
      required FutureOr<void> Function(String, String) sessionStatus,
      required FutureOr<void> Function(Telepathy) startSessions,
      required FutureOr<void> Function(Statistics) statistics,
      required FutureOr<void> Function(ChatMessage) messageReceived,
      required FutureOr<void> Function(bool, bool) managerActive,
      required FutureOr<void> Function(DartNotify, bool) screenshareStarted}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(identity, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
            host, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            networkConfig, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
            screenshareConfig, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            overlay, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
            codecConfig, serializer);
        sse_encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
            acceptCall, serializer);
        sse_encode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(
            callEnded, serializer);
        sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
            getContact, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            callState, serializer);
        sse_encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
            sessionStatus, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy_Output_unit_AnyhowException(
            startSessions, serializer);
        sse_encode_DartFn_Inputs_statistics_Output_unit_AnyhowException(
            statistics, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
            messageReceived, serializer);
        sse_encode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(
            managerActive, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_bool_Output_unit_AnyhowException(
            screenshareStarted, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathyNewConstMeta,
      argValues: [
        identity,
        host,
        networkConfig,
        screenshareConfig,
        overlay,
        codecConfig,
        acceptCall,
        callEnded,
        getContact,
        callState,
        sessionStatus,
        startSessions,
        statistics,
        messageReceived,
        managerActive,
        screenshareStarted
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyNewConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_new",
        argNames: [
          "identity",
          "host",
          "networkConfig",
          "screenshareConfig",
          "overlay",
          "codecConfig",
          "acceptCall",
          "callEnded",
          "getContact",
          "callState",
          "sessionStatus",
          "startSessions",
          "statistics",
          "messageReceived",
          "managerActive",
          "screenshareStarted"
        ],
      );

  @override
  Future<void> crateApiTelepathyTelepathyRestartManager(
      {required Telepathy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathyRestartManagerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyRestartManagerConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_restart_manager",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiTelepathyTelepathySendChat(
      {required Telepathy that, required ChatMessage message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathySendChatConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySendChatConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_send_chat",
        argNames: ["that", "message"],
      );

  @override
  void crateApiTelepathyTelepathySetDeafened(
      {required Telepathy that, required bool deafened}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_bool(deafened, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetDeafenedConstMeta,
      argValues: [that, deafened],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetDeafenedConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_deafened",
        argNames: ["that", "deafened"],
      );

  @override
  void crateApiTelepathyTelepathySetDenoise(
      {required Telepathy that, required bool denoise}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_bool(denoise, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetDenoiseConstMeta,
      argValues: [that, denoise],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetDenoiseConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_denoise",
        argNames: ["that", "denoise"],
      );

  @override
  void crateApiTelepathyTelepathySetEfficiencyMode(
      {required Telepathy that, required bool enabled}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetEfficiencyModeConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetEfficiencyModeConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_efficiency_mode",
        argNames: ["that", "enabled"],
      );

  @override
  Future<void> crateApiTelepathyTelepathySetIdentity(
      {required Telepathy that, required List<int> key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathySetIdentityConstMeta,
      argValues: [that, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetIdentityConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_identity",
        argNames: ["that", "key"],
      );

  @override
  Future<void> crateApiTelepathyTelepathySetInputDevice(
      {required Telepathy that, String? device}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_opt_String(device, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 69, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetInputDeviceConstMeta,
      argValues: [that, device],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetInputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_input_device",
        argNames: ["that", "device"],
      );

  @override
  void crateApiTelepathyTelepathySetInputVolume(
      {required Telepathy that, required double decibel}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_f_32(decibel, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 70)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetInputVolumeConstMeta,
      argValues: [that, decibel],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetInputVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_input_volume",
        argNames: ["that", "decibel"],
      );

  @override
  Future<void> crateApiTelepathyTelepathySetModel(
      {required Telepathy that, Uint8List? model}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_opt_list_prim_u_8_strict(model, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 71, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathySetModelConstMeta,
      argValues: [that, model],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetModelConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_model",
        argNames: ["that", "model"],
      );

  @override
  void crateApiTelepathyTelepathySetMuted(
      {required Telepathy that, required bool muted}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_bool(muted, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetMutedConstMeta,
      argValues: [that, muted],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetMutedConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_muted",
        argNames: ["that", "muted"],
      );

  @override
  Future<void> crateApiTelepathyTelepathySetOutputDevice(
      {required Telepathy that, String? device}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_opt_String(device, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetOutputDeviceConstMeta,
      argValues: [that, device],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetOutputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_output_device",
        argNames: ["that", "device"],
      );

  @override
  void crateApiTelepathyTelepathySetOutputVolume(
      {required Telepathy that, required double decibel}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_f_32(decibel, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetOutputVolumeConstMeta,
      argValues: [that, decibel],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetOutputVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_output_volume",
        argNames: ["that", "decibel"],
      );

  @override
  void crateApiTelepathyTelepathySetPlayCustomRingtones(
      {required Telepathy that, required bool play}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_bool(play, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 75)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetPlayCustomRingtonesConstMeta,
      argValues: [that, play],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTelepathyTelepathySetPlayCustomRingtonesConstMeta =>
          const TaskConstMeta(
            debugName: "Telepathy_set_play_custom_ringtones",
            argNames: ["that", "play"],
          );

  @override
  void crateApiTelepathyTelepathySetRmsThreshold(
      {required Telepathy that, required double decimal}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_f_32(decimal, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 76)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetRmsThresholdConstMeta,
      argValues: [that, decimal],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetRmsThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_rms_threshold",
        argNames: ["that", "decimal"],
      );

  @override
  void crateApiTelepathyTelepathySetSendCustomRingtone(
      {required Telepathy that, required bool send}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_bool(send, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathySetSendCustomRingtoneConstMeta,
      argValues: [that, send],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathySetSendCustomRingtoneConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_set_send_custom_ringtone",
        argNames: ["that", "send"],
      );

  @override
  Future<void> crateApiTelepathyTelepathyStartCall(
      {required Telepathy that, required Contact contact}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 78, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathyStartCallConstMeta,
      argValues: [that, contact],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyStartCallConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_start_call",
        argNames: ["that", "contact"],
      );

  @override
  Future<void> crateApiTelepathyTelepathyStartScreenshare(
      {required Telepathy that, required Contact contact}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 79, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiTelepathyTelepathyStartScreenshareConstMeta,
      argValues: [that, contact],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyStartScreenshareConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_start_screenshare",
        argNames: ["that", "contact"],
      );

  @override
  Future<void> crateApiTelepathyTelepathyStartSession(
      {required Telepathy that, required Contact contact}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 80, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathyStartSessionConstMeta,
      argValues: [that, contact],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyStartSessionConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_start_session",
        argNames: ["that", "contact"],
      );

  @override
  Future<void> crateApiTelepathyTelepathyStopSession(
      {required Telepathy that, required Contact contact}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyTelepathyStopSessionConstMeta,
      argValues: [that, contact],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyTelepathyStopSessionConstMeta =>
      const TaskConstMeta(
        debugName: "Telepathy_stop_session",
        argNames: ["that", "contact"],
      );

  @override
  Stream<String> crateApiLoggerCreateLogStream() {
    final s = RustStreamSink<String>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 82)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerCreateLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiLoggerCreateLogStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s"],
      );

  @override
  (String, Uint8List) crateApiCryptoGenerateKeys() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 83)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_list_prim_u_8_strict,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiCryptoGenerateKeysConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoGenerateKeysConstMeta => const TaskConstMeta(
        debugName: "generate_keys",
        argNames: [],
      );

  @override
  Future<void> crateApiLoggerInitLogger() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 84, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerInitLoggerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggerInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  @override
  Future<void> crateApiPlayerLoadRingtone({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 85, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiPlayerLoadRingtoneConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerLoadRingtoneConstMeta => const TaskConstMeta(
        debugName: "load_ringtone",
        argNames: ["path"],
      );

  @override
  void crateApiLoggerRustSetUp() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 86)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerRustSetUpConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggerRustSetUpConstMeta => const TaskConstMeta(
        debugName: "rust_set_up",
        argNames: [],
      );

  @override
  Stream<String> crateApiLoggerSendToDartLoggerSetStreamSink() {
    final streamSink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(streamSink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 87, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerSendToDartLoggerSetStreamSinkConstMeta,
      argValues: [streamSink],
      apiImpl: this,
    )));
    return streamSink.stream;
  }

  TaskConstMeta get kCrateApiLoggerSendToDartLoggerSetStreamSinkConstMeta =>
      const TaskConstMeta(
        debugName: "send_to_dart_logger_set_stream_sink",
        argNames: ["streamSink"],
      );

  @override
  Future<Statistics> crateApiTelepathyStatisticsDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 88, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_statistics,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTelepathyStatisticsDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTelepathyStatisticsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "statistics_default",
        argNames: [],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
          FutureOr<void> Function(ChatMessage) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
              rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(DartNotify, bool) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
              rawArg0);
      final arg1 = dco_decode_bool(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy_Output_unit_AnyhowException(
          FutureOr<void> Function(Telepathy) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
              rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
          FutureOr<void> Function(String, String) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_String(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(String, bool) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_bool(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic, dynamic)
      encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
          FutureOr<bool> Function(String, Uint8List?, DartNotify) raw) {
    return (callId, rawArg0, rawArg1, rawArg2) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_opt_list_prim_u_8_strict(rawArg1);
      final arg2 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
              rawArg2);

      Box<bool>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1, arg2));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_bool(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(bool) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_bool(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(bool, bool) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_bool(rawArg0);
      final arg1 = dco_decode_bool(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
          FutureOr<Contact?> Function(Uint8List) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_list_prim_u_8_strict(rawArg0);

      Box<Contact?>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_statistics_Output_unit_AnyhowException(
          FutureOr<void> Function(Statistics) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_statistics(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcHost => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcHost => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Capabilities => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Capabilities => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChatMessage => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChatMessage => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CodecConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CodecConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Contact => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Contact => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DartNotify => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DartNotify => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NetworkConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NetworkConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Overlay => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Overlay => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RecordingConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RecordingConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ScreenshareConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ScreenshareConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundPlayer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundPlayer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Telepathy => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Telepathy => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcHost
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcHostImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Capabilities
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CapabilitiesImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CodecConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CodecConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartNotify
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartNotifyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NetworkConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NetworkConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Overlay
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OverlayImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecordingConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecordingConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ScreenshareConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ScreenshareConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Telepathy
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TelepathyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Capabilities
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CapabilitiesImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CodecConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CodecConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartNotify
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartNotifyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NetworkConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NetworkConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Overlay
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OverlayImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecordingConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecordingConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ScreenshareConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ScreenshareConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Telepathy
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TelepathyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<void> Function(ChatMessage)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(DartNotify, bool)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_bool_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(Telepathy)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, String)
      dco_decode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, bool)
      dco_decode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(String, Uint8List?, DartNotify)
      dco_decode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(bool)
      dco_decode_DartFn_Inputs_bool_Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(bool, bool)
      dco_decode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Contact?> Function(Uint8List)
      dco_decode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(Statistics)
      dco_decode_DartFn_Inputs_statistics_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ArcHost
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcHostImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Capabilities
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CapabilitiesImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CodecConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CodecConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartNotify
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartNotifyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NetworkConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NetworkConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Overlay
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OverlayImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecordingConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecordingConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ScreenshareConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ScreenshareConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Telepathy
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TelepathyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Contact
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
        raw);
  }

  @protected
  RecordingConfig
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
        raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  DartError dco_decode_dart_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DartError(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, Uint8List)> dco_decode_list_record_string_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_list_prim_u_8_strict)
        .toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Contact?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            raw);
  }

  @protected
  RecordingConfig?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
            raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (bool, bool, double) dco_decode_record_bool_bool_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_bool(arr[0]),
      dco_decode_bool(arr[1]),
      dco_decode_f_32(arr[2]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_32(arr[1]),
    );
  }

  @protected
  (List<String>, List<String>) dco_decode_record_list_string_list_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_String(arr[0]),
      dco_decode_list_String(arr[1]),
    );
  }

  @protected
  (String, Uint8List) dco_decode_record_string_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  SendToDartLogger dco_decode_send_to_dart_logger(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return SendToDartLogger();
  }

  @protected
  Statistics dco_decode_statistics(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Statistics(
      inputLevel: dco_decode_f_32(arr[0]),
      outputLevel: dco_decode_f_32(arr[1]),
      latency: dco_decode_usize(arr[2]),
      uploadBandwidth: dco_decode_usize(arr[3]),
      downloadBandwidth: dco_decode_usize(arr[4]),
      loss: dco_decode_f_64(arr[5]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcHost
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcHostImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Capabilities
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CapabilitiesImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChatMessage
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CodecConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CodecConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartNotify
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartNotifyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NetworkConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NetworkConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Overlay
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OverlayImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RecordingConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecordingConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ScreenshareConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ScreenshareConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Telepathy
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TelepathyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChatMessage
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Capabilities
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CapabilitiesImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChatMessage
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CodecConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CodecConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartNotify
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartNotifyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NetworkConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NetworkConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Overlay
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OverlayImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RecordingConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecordingConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ScreenshareConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ScreenshareConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Telepathy
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TelepathyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ArcHost
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcHostImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Capabilities
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CapabilitiesImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChatMessage
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CodecConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CodecConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartNotify
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartNotifyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NetworkConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NetworkConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Overlay
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OverlayImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RecordingConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecordingConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ScreenshareConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ScreenshareConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Telepathy
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TelepathyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Contact
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
        deserializer));
  }

  @protected
  RecordingConfig
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
        deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  DartError sse_decode_dart_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return DartError(message: var_message);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, Uint8List)> sse_decode_list_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Contact?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  RecordingConfig?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (bool, bool, double) sse_decode_record_bool_bool_f_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_bool(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    var var_field2 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (List<String>, List<String>) sse_decode_record_list_string_list_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_String(deserializer);
    var var_field1 = sse_decode_list_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, Uint8List) sse_decode_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SendToDartLogger sse_decode_send_to_dart_logger(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SendToDartLogger();
  }

  @protected
  Statistics sse_decode_statistics(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputLevel = sse_decode_f_32(deserializer);
    var var_outputLevel = sse_decode_f_32(deserializer);
    var var_latency = sse_decode_usize(deserializer);
    var var_uploadBandwidth = sse_decode_usize(deserializer);
    var var_downloadBandwidth = sse_decode_usize(deserializer);
    var var_loss = sse_decode_f_64(deserializer);
    return Statistics(
        inputLevel: var_inputLevel,
        outputLevel: var_outputLevel,
        latency: var_latency,
        uploadBandwidth: var_uploadBandwidth,
        downloadBandwidth: var_downloadBandwidth,
        loss: var_loss);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          ArcHost self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcHostImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          Capabilities self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CapabilitiesImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChatMessageImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          CodecConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CodecConfigImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContactImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          DartNotify self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartNotifyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          NetworkConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NetworkConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          Overlay self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OverlayImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          RecordingConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RecordingConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          ScreenshareConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ScreenshareConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SoundHandleImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SoundPlayerImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          Telepathy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TelepathyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChatMessageImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContactImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          Capabilities self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CapabilitiesImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChatMessageImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          CodecConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CodecConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContactImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          DartNotify self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartNotifyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          NetworkConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NetworkConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          Overlay self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OverlayImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          RecordingConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RecordingConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          ScreenshareConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ScreenshareConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SoundHandleImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SoundPlayerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          Telepathy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TelepathyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
          FutureOr<void> Function(ChatMessage) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(DartNotify, bool) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_bool_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy_Output_unit_AnyhowException(
          FutureOr<void> Function(Telepathy) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
      FutureOr<void> Function(String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(
      FutureOr<void> Function(String, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
          FutureOr<bool> Function(String, Uint8List?, DartNotify) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
      FutureOr<void> Function(bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_bool_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(
      FutureOr<void> Function(bool, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
          FutureOr<Contact?> Function(Uint8List) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_statistics_Output_unit_AnyhowException(
      FutureOr<void> Function(Statistics) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_statistics_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
        PlatformPointerUtil.ptrToPlatformInt64(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          ArcHost self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcHostImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapabilities(
          Capabilities self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CapabilitiesImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChatMessageImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCodecConfig(
          CodecConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CodecConfigImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContactImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          DartNotify self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartNotifyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          NetworkConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NetworkConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          Overlay self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OverlayImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          RecordingConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RecordingConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScreenshareConfig(
          ScreenshareConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ScreenshareConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SoundHandleImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SoundPlayerImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTelepathy(
          Telepathy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TelepathyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          RecordingConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_dart_error(DartError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_list_prim_u_8_strict(
      List<(String, Uint8List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          RecordingConfig? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordingConfig(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_record_bool_bool_f_32(
      (bool, bool, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_bool(self.$2, serializer);
    sse_encode_f_32(self.$3, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_list_string_list_string(
      (List<String>, List<String>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.$1, serializer);
    sse_encode_list_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_list_prim_u_8_strict(
      (String, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_send_to_dart_logger(
      SendToDartLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_statistics(Statistics self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.inputLevel, serializer);
    sse_encode_f_32(self.outputLevel, serializer);
    sse_encode_usize(self.latency, serializer);
    sse_encode_usize(self.uploadBandwidth, serializer);
    sse_encode_usize(self.downloadBandwidth, serializer);
    sse_encode_f_64(self.loss, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ArcHostImpl extends RustOpaque implements ArcHost {
  // Not to be used by end users
  ArcHostImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcHostImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcHost,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcHost,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcHostPtr,
  );
}

@sealed
class CapabilitiesImpl extends RustOpaque implements Capabilities {
  // Not to be used by end users
  CapabilitiesImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CapabilitiesImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Capabilities,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Capabilities,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CapabilitiesPtr,
  );

  List<String> devices() =>
      RustLib.instance.api.crateApiTelepathyCapabilitiesDevices(
        that: this,
      );

  List<String> encoders() =>
      RustLib.instance.api.crateApiTelepathyCapabilitiesEncoders(
        that: this,
      );
}

@sealed
class ChatMessageImpl extends RustOpaque implements ChatMessage {
  // Not to be used by end users
  ChatMessageImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChatMessageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ChatMessage,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChatMessage,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChatMessagePtr,
  );

  List<(String, Uint8List)> attachments() =>
      RustLib.instance.api.crateApiTelepathyChatMessageAttachments(
        that: this,
      );

  String get text =>
      RustLib.instance.api.crateApiTelepathyChatMessageAutoAccessorGetText(
        that: this,
      );

  set text(String text) => RustLib.instance.api
      .crateApiTelepathyChatMessageAutoAccessorSetText(that: this, text: text);

  void clearAttachments() =>
      RustLib.instance.api.crateApiTelepathyChatMessageClearAttachments(
        that: this,
      );

  bool isSender({required String identity}) => RustLib.instance.api
      .crateApiTelepathyChatMessageIsSender(that: this, identity: identity);

  String time() => RustLib.instance.api.crateApiTelepathyChatMessageTime(
        that: this,
      );
}

@sealed
class CodecConfigImpl extends RustOpaque implements CodecConfig {
  // Not to be used by end users
  CodecConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CodecConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CodecConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CodecConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CodecConfigPtr,
  );

  void setEnabled({required bool enabled}) => RustLib.instance.api
      .crateApiTelepathyCodecConfigSetEnabled(that: this, enabled: enabled);

  void setResidualBits({required double residualBits}) =>
      RustLib.instance.api.crateApiTelepathyCodecConfigSetResidualBits(
          that: this, residualBits: residualBits);

  void setVbr({required bool vbr}) => RustLib.instance.api
      .crateApiTelepathyCodecConfigSetVbr(that: this, vbr: vbr);

  (bool, bool, double) toValues() =>
      RustLib.instance.api.crateApiTelepathyCodecConfigToValues(
        that: this,
      );
}

@sealed
class ContactImpl extends RustOpaque implements Contact {
  // Not to be used by end users
  ContactImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContactImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Contact,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Contact,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContactPtr,
  );

  String id() => RustLib.instance.api.crateApiContactContactId(
        that: this,
      );

  bool idEq({required List<int> id}) =>
      RustLib.instance.api.crateApiContactContactIdEq(that: this, id: id);

  String nickname() => RustLib.instance.api.crateApiContactContactNickname(
        that: this,
      );

  String peerId() => RustLib.instance.api.crateApiContactContactPeerId(
        that: this,
      );

  Contact pubClone() => RustLib.instance.api.crateApiContactContactPubClone(
        that: this,
      );

  void setNickname({required String nickname}) => RustLib.instance.api
      .crateApiContactContactSetNickname(that: this, nickname: nickname);
}

@sealed
class DartNotifyImpl extends RustOpaque implements DartNotify {
  // Not to be used by end users
  DartNotifyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DartNotifyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DartNotify,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DartNotify,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DartNotifyPtr,
  );

  /// public notified function for dart
  Future<void> notified() =>
      RustLib.instance.api.crateApiTelepathyDartNotifyNotified(
        that: this,
      );

  /// notifies one waiter
  void notify() => RustLib.instance.api.crateApiTelepathyDartNotifyNotify(
        that: this,
      );
}

@sealed
class NetworkConfigImpl extends RustOpaque implements NetworkConfig {
  // Not to be used by end users
  NetworkConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NetworkConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NetworkConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NetworkConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NetworkConfigPtr,
  );

  Future<String> getRelayAddress() =>
      RustLib.instance.api.crateApiTelepathyNetworkConfigGetRelayAddress(
        that: this,
      );

  Future<String> getRelayId() =>
      RustLib.instance.api.crateApiTelepathyNetworkConfigGetRelayId(
        that: this,
      );

  Future<void> setRelayAddress({required String relayAddress}) =>
      RustLib.instance.api.crateApiTelepathyNetworkConfigSetRelayAddress(
          that: this, relayAddress: relayAddress);

  Future<void> setRelayId({required String relayId}) => RustLib.instance.api
      .crateApiTelepathyNetworkConfigSetRelayId(that: this, relayId: relayId);
}

@sealed
class OverlayImpl extends RustOpaque implements Overlay {
  // Not to be used by end users
  OverlayImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OverlayImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Overlay,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Overlay,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OverlayPtr,
  );

  /// disable the overlay
  Future<void> disable() =>
      RustLib.instance.api.crateApiOverlayOverlayOverlayDisable(
        that: this,
      );

  /// enable the overlay
  Future<void> enable() =>
      RustLib.instance.api.crateApiOverlayOverlayOverlayEnable(
        that: this,
      );

  /// hide the overlay window irrespective of platform
  Future<void> hide_() =>
      RustLib.instance.api.crateApiOverlayOverlayOverlayHide(
        that: this,
      );

  /// move and resize the overlay window
  Future<void> moveOverlay(
          {required int x,
          required int y,
          required int width,
          required int height}) =>
      RustLib.instance.api.crateApiOverlayOverlayOverlayMoveOverlay(
          that: this, x: x, y: y, width: width, height: height);

  /// access the screen resolution for overlay positioning in the front end
  (int, int) screenResolution() =>
      RustLib.instance.api.crateApiOverlayOverlayOverlayScreenResolution(
        that: this,
      );

  /// change the background color of the overlay
  Future<void> setBackgroundColor({required int backgroundColor}) =>
      RustLib.instance.api.crateApiOverlayOverlayOverlaySetBackgroundColor(
          that: this, backgroundColor: backgroundColor);

  /// change the font color of the overlay
  Future<void> setFontColor({required int fontColor}) =>
      RustLib.instance.api.crateApiOverlayOverlayOverlaySetFontColor(
          that: this, fontColor: fontColor);

  /// change the font height (size) of the overlay
  Future<void> setFontHeight({required int height}) => RustLib.instance.api
      .crateApiOverlayOverlayOverlaySetFontHeight(that: this, height: height);

  /// show the overlay window irrespective of platform
  Future<void> show_() =>
      RustLib.instance.api.crateApiOverlayOverlayOverlayShow(
        that: this,
      );
}

@sealed
class RecordingConfigImpl extends RustOpaque implements RecordingConfig {
  // Not to be used by end users
  RecordingConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RecordingConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RecordingConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RecordingConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RecordingConfigPtr,
  );

  int bitrate() => RustLib.instance.api.crateApiTelepathyRecordingConfigBitrate(
        that: this,
      );

  String device() =>
      RustLib.instance.api.crateApiTelepathyRecordingConfigDevice(
        that: this,
      );

  String encoder() =>
      RustLib.instance.api.crateApiTelepathyRecordingConfigEncoder(
        that: this,
      );

  int framerate() =>
      RustLib.instance.api.crateApiTelepathyRecordingConfigFramerate(
        that: this,
      );

  int? height() => RustLib.instance.api.crateApiTelepathyRecordingConfigHeight(
        that: this,
      );
}

@sealed
class ScreenshareConfigImpl extends RustOpaque implements ScreenshareConfig {
  // Not to be used by end users
  ScreenshareConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ScreenshareConfigImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ScreenshareConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ScreenshareConfig,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ScreenshareConfigPtr,
  );

  Future<Capabilities> capabilities() =>
      RustLib.instance.api.crateApiTelepathyScreenshareConfigCapabilities(
        that: this,
      );

  Future<RecordingConfig?> recordingConfig() =>
      RustLib.instance.api.crateApiTelepathyScreenshareConfigRecordingConfig(
        that: this,
      );

  String toString() =>
      RustLib.instance.api.crateApiTelepathyScreenshareConfigToString(
        that: this,
      );

  Future<void> updateRecordingConfig(
          {required String encoder,
          required String device,
          required int bitrate,
          required int framerate,
          int? height}) =>
      RustLib.instance.api
          .crateApiTelepathyScreenshareConfigUpdateRecordingConfig(
              that: this,
              encoder: encoder,
              device: device,
              bitrate: bitrate,
              framerate: framerate,
              height: height);
}

@sealed
class SoundHandleImpl extends RustOpaque implements SoundHandle {
  // Not to be used by end users
  SoundHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SoundHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SoundHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SoundHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SoundHandlePtr,
  );

  void cancel() => RustLib.instance.api.crateApiPlayerSoundHandleCancel(
        that: this,
      );
}

@sealed
class SoundPlayerImpl extends RustOpaque implements SoundPlayer {
  // Not to be used by end users
  SoundPlayerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SoundPlayerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SoundPlayer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SoundPlayer,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SoundPlayerPtr,
  );

  ArcHost host() => RustLib.instance.api.crateApiPlayerSoundPlayerHost(
        that: this,
      );

  /// Public play function
  Future<SoundHandle> play({required List<int> bytes}) => RustLib.instance.api
      .crateApiPlayerSoundPlayerPlay(that: this, bytes: bytes);

  Future<void> updateOutputDevice({String? name}) => RustLib.instance.api
      .crateApiPlayerSoundPlayerUpdateOutputDevice(that: this, name: name);

  void updateOutputVolume({required double volume}) => RustLib.instance.api
      .crateApiPlayerSoundPlayerUpdateOutputVolume(that: this, volume: volume);
}

@sealed
class TelepathyImpl extends RustOpaque implements Telepathy {
  // Not to be used by end users
  TelepathyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TelepathyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Telepathy,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Telepathy,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TelepathyPtr,
  );

  /// Blocks while an audio test is running
  Future<void> audioTest() =>
      RustLib.instance.api.crateApiTelepathyTelepathyAudioTest(
        that: this,
      );

  ChatMessage buildChat(
          {required Contact contact,
          required String text,
          required List<(String, Uint8List)> attachments}) =>
      RustLib.instance.api.crateApiTelepathyTelepathyBuildChat(
          that: this, contact: contact, text: text, attachments: attachments);

  /// Ends the call (if there is one)
  void endCall() => RustLib.instance.api.crateApiTelepathyTelepathyEndCall(
        that: this,
      );

  Future<void> joinRoom({required List<String> memberStrings}) =>
      RustLib.instance.api.crateApiTelepathyTelepathyJoinRoom(
          that: this, memberStrings: memberStrings);

  /// Lists the input and output devices
  Future<(List<String>, List<String>)> listDevices() =>
      RustLib.instance.api.crateApiTelepathyTelepathyListDevices(
        that: this,
      );

  /// Restarts the session manager
  Future<void> restartManager() =>
      RustLib.instance.api.crateApiTelepathyTelepathyRestartManager(
        that: this,
      );

  /// Sends a chat message
  Future<void> sendChat({required ChatMessage message}) => RustLib.instance.api
      .crateApiTelepathyTelepathySendChat(that: this, message: message);

  void setDeafened({required bool deafened}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetDeafened(that: this, deafened: deafened);

  /// Changing the denoise flag will not affect the current call
  void setDenoise({required bool denoise}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetDenoise(that: this, denoise: denoise);

  void setEfficiencyMode({required bool enabled}) =>
      RustLib.instance.api.crateApiTelepathyTelepathySetEfficiencyMode(
          that: this, enabled: enabled);

  /// Sets the signing key (called when the profile changes)
  Future<void> setIdentity({required List<int> key}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetIdentity(that: this, key: key);

  Future<void> setInputDevice({String? device}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetInputDevice(that: this, device: device);

  void setInputVolume({required double decibel}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetInputVolume(that: this, decibel: decibel);

  Future<void> setModel({Uint8List? model}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetModel(that: this, model: model);

  void setMuted({required bool muted}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetMuted(that: this, muted: muted);

  Future<void> setOutputDevice({String? device}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetOutputDevice(that: this, device: device);

  void setOutputVolume({required double decibel}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetOutputVolume(that: this, decibel: decibel);

  void setPlayCustomRingtones({required bool play}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetPlayCustomRingtones(that: this, play: play);

  void setRmsThreshold({required double decimal}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetRmsThreshold(that: this, decimal: decimal);

  void setSendCustomRingtone({required bool send}) => RustLib.instance.api
      .crateApiTelepathyTelepathySetSendCustomRingtone(that: this, send: send);

  /// Attempts to start a call through an existing session
  Future<void> startCall({required Contact contact}) => RustLib.instance.api
      .crateApiTelepathyTelepathyStartCall(that: this, contact: contact);

  Future<void> startScreenshare({required Contact contact}) => RustLib
      .instance.api
      .crateApiTelepathyTelepathyStartScreenshare(that: this, contact: contact);

  /// Tries to start a session for a contact
  Future<void> startSession({required Contact contact}) => RustLib.instance.api
      .crateApiTelepathyTelepathyStartSession(that: this, contact: contact);

  /// Stops a specific session (called when a contact is deleted)
  Future<void> stopSession({required Contact contact}) => RustLib.instance.api
      .crateApiTelepathyTelepathyStopSession(that: this, contact: contact);
}
