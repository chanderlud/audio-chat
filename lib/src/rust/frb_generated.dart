// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/audio_chat.dart';
import 'api/contact.dart';
import 'api/crypto.dart';
import 'api/error.dart';
import 'api/logger.dart';
import 'api/player.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.29';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'audio_chat',
    ioDirectory: 'rust/audio_chat/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> audioChatAudioTest({required AudioChat that, dynamic hint});

  void audioChatEndCall({required AudioChat that, dynamic hint});

  (List<String>, List<String>) audioChatListDevices(
      {required AudioChat that, dynamic hint});

  Future<AudioChat> audioChatNew(
      {required List<int> signingKey,
      required ArcHost host,
      required FutureOr<bool> Function(String, Uint8List?) acceptCall,
      required FutureOr<void> Function(String, bool) callEnded,
      required FutureOr<Contact?> Function(U8Array32) getContact,
      required FutureOr<void> Function() connected,
      required FutureOr<void> Function(bool) callState,
      required FutureOr<void> Function(String, bool) contactStatus,
      required FutureOr<void> Function(AudioChat) startSessions,
      required FutureOr<void> Function(int) callLatency,
      required FutureOr<Uint8List?> Function() loadRingtone,
      required FutureOr<void> Function(Statistics) statistics,
      required FutureOr<void> Function(String) messageReceived,
      required FutureOr<void> Function(bool, bool) managerActive,
      dynamic hint});

  Future<void> audioChatRestartManager({required AudioChat that, dynamic hint});

  Future<void> audioChatSayHello(
      {required AudioChat that, required Contact contact, dynamic hint});

  Future<void> audioChatSendChat(
      {required AudioChat that,
      required String message,
      required String id,
      dynamic hint});

  void audioChatSetDeafened(
      {required AudioChat that, required bool deafened, dynamic hint});

  void audioChatSetDenoise(
      {required AudioChat that, required bool denoise, dynamic hint});

  Future<void> audioChatSetInputDevice(
      {required AudioChat that, String? device, dynamic hint});

  void audioChatSetInputVolume(
      {required AudioChat that, required double decibel, dynamic hint});

  void audioChatSetMuted(
      {required AudioChat that, required bool muted, dynamic hint});

  Future<void> audioChatSetOutputDevice(
      {required AudioChat that, String? device, dynamic hint});

  void audioChatSetOutputVolume(
      {required AudioChat that, required double decibel, dynamic hint});

  void audioChatSetPlayCustomRingtones(
      {required AudioChat that, required bool play, dynamic hint});

  void audioChatSetRmsThreshold(
      {required AudioChat that, required double decimal, dynamic hint});

  Future<void> audioChatSetSigningKey(
      {required AudioChat that, required List<int> key, dynamic hint});

  Future<void> audioChatStartSession(
      {required AudioChat that, required Contact contact, dynamic hint});

  Future<void> audioChatStopSession(
      {required AudioChat that, required Contact contact, dynamic hint});

  Contact contactFromParts(
      {required String id,
      required String nickname,
      required List<int> verifyingKey,
      dynamic hint});

  String contactId({required Contact that, dynamic hint});

  bool contactKeyEq(
      {required Contact that, required List<int> key, dynamic hint});

  Contact contactNew(
      {required String nickname, required List<int> keyBytes, dynamic hint});

  String contactNickname({required Contact that, dynamic hint});

  Contact contactPubClone({required Contact that, dynamic hint});

  void contactSetNickname(
      {required Contact that, required String nickname, dynamic hint});

  U8Array32 contactVerifyingKey({required Contact that, dynamic hint});

  U8Array64 generateKeys({dynamic hint});

  Stream<String> sendToDartLoggerSetStreamSink({dynamic hint});

  Stream<String> createLogStream({dynamic hint});

  Future<void> initLogger({dynamic hint});

  void rustSetUp({dynamic hint});

  void soundHandleCancel({required SoundHandle that, dynamic hint});

  ArcHost soundPlayerHost({required SoundPlayer that, dynamic hint});

  SoundPlayer soundPlayerNew({required double outputVolume, dynamic hint});

  Future<SoundHandle> soundPlayerPlay(
      {required SoundPlayer that, required List<int> bytes, dynamic hint});

  Future<void> soundPlayerUpdateOutputDevice(
      {required SoundPlayer that, String? name, dynamic hint});

  void soundPlayerUpdateOutputVolume(
      {required SoundPlayer that, required double volume, dynamic hint});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcHost;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcHost;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcHostPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioChat;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioChat;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioChatPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Contact;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Contact;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ContactPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SoundHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundPlayer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SoundPlayerPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> audioChatAudioTest({required AudioChat that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kAudioChatAudioTestConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatAudioTestConstMeta => const TaskConstMeta(
        debugName: "AudioChat_audio_test",
        argNames: ["that"],
      );

  @override
  void audioChatEndCall({required AudioChat that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatEndCallConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatEndCallConstMeta => const TaskConstMeta(
        debugName: "AudioChat_end_call",
        argNames: ["that"],
      );

  @override
  (List<String>, List<String>) audioChatListDevices(
      {required AudioChat that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_list_string_list_string,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kAudioChatListDevicesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatListDevicesConstMeta => const TaskConstMeta(
        debugName: "AudioChat_list_devices",
        argNames: ["that"],
      );

  @override
  Future<AudioChat> audioChatNew(
      {required List<int> signingKey,
      required ArcHost host,
      required FutureOr<bool> Function(String, Uint8List?) acceptCall,
      required FutureOr<void> Function(String, bool) callEnded,
      required FutureOr<Contact?> Function(U8Array32) getContact,
      required FutureOr<void> Function() connected,
      required FutureOr<void> Function(bool) callState,
      required FutureOr<void> Function(String, bool) contactStatus,
      required FutureOr<void> Function(AudioChat) startSessions,
      required FutureOr<void> Function(int) callLatency,
      required FutureOr<Uint8List?> Function() loadRingtone,
      required FutureOr<void> Function(Statistics) statistics,
      required FutureOr<void> Function(String) messageReceived,
      required FutureOr<void> Function(bool, bool) managerActive,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(signingKey, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost(
            host, serializer);
        sse_encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Output_bool(
            acceptCall, serializer);
        sse_encode_DartFn_Inputs_String_bool_Output_unit(callEnded, serializer);
        sse_encode_DartFn_Inputs_u_8_array_32_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            getContact, serializer);
        sse_encode_DartFn_Inputs__Output_unit(connected, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit(callState, serializer);
        sse_encode_DartFn_Inputs_String_bool_Output_unit(
            contactStatus, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat_Output_unit(
            startSessions, serializer);
        sse_encode_DartFn_Inputs_i_32_Output_unit(callLatency, serializer);
        sse_encode_DartFn_Inputs__Output_opt_list_prim_u_8_strict(
            loadRingtone, serializer);
        sse_encode_DartFn_Inputs_statistics_Output_unit(statistics, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit(
            messageReceived, serializer);
        sse_encode_DartFn_Inputs_bool_bool_Output_unit(
            managerActive, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatNewConstMeta,
      argValues: [
        signingKey,
        host,
        acceptCall,
        callEnded,
        getContact,
        connected,
        callState,
        contactStatus,
        startSessions,
        callLatency,
        loadRingtone,
        statistics,
        messageReceived,
        managerActive
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatNewConstMeta => const TaskConstMeta(
        debugName: "AudioChat_new",
        argNames: [
          "signingKey",
          "host",
          "acceptCall",
          "callEnded",
          "getContact",
          "connected",
          "callState",
          "contactStatus",
          "startSessions",
          "callLatency",
          "loadRingtone",
          "statistics",
          "messageReceived",
          "managerActive"
        ],
      );

  @override
  Future<void> audioChatRestartManager(
      {required AudioChat that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kAudioChatRestartManagerConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatRestartManagerConstMeta => const TaskConstMeta(
        debugName: "AudioChat_restart_manager",
        argNames: ["that"],
      );

  @override
  Future<void> audioChatSayHello(
      {required AudioChat that, required Contact contact, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kAudioChatSayHelloConstMeta,
      argValues: [that, contact],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSayHelloConstMeta => const TaskConstMeta(
        debugName: "AudioChat_say_hello",
        argNames: ["that", "contact"],
      );

  @override
  Future<void> audioChatSendChat(
      {required AudioChat that,
      required String message,
      required String id,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_String(message, serializer);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kAudioChatSendChatConstMeta,
      argValues: [that, message, id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSendChatConstMeta => const TaskConstMeta(
        debugName: "AudioChat_send_chat",
        argNames: ["that", "message", "id"],
      );

  @override
  void audioChatSetDeafened(
      {required AudioChat that, required bool deafened, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_bool(deafened, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetDeafenedConstMeta,
      argValues: [that, deafened],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetDeafenedConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_deafened",
        argNames: ["that", "deafened"],
      );

  @override
  void audioChatSetDenoise(
      {required AudioChat that, required bool denoise, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_bool(denoise, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetDenoiseConstMeta,
      argValues: [that, denoise],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetDenoiseConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_denoise",
        argNames: ["that", "denoise"],
      );

  @override
  Future<void> audioChatSetInputDevice(
      {required AudioChat that, String? device, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_opt_String(device, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetInputDeviceConstMeta,
      argValues: [that, device],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetInputDeviceConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_input_device",
        argNames: ["that", "device"],
      );

  @override
  void audioChatSetInputVolume(
      {required AudioChat that, required double decibel, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_f_32(decibel, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetInputVolumeConstMeta,
      argValues: [that, decibel],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetInputVolumeConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_input_volume",
        argNames: ["that", "decibel"],
      );

  @override
  void audioChatSetMuted(
      {required AudioChat that, required bool muted, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_bool(muted, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetMutedConstMeta,
      argValues: [that, muted],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetMutedConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_muted",
        argNames: ["that", "muted"],
      );

  @override
  Future<void> audioChatSetOutputDevice(
      {required AudioChat that, String? device, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_opt_String(device, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetOutputDeviceConstMeta,
      argValues: [that, device],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetOutputDeviceConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_output_device",
        argNames: ["that", "device"],
      );

  @override
  void audioChatSetOutputVolume(
      {required AudioChat that, required double decibel, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_f_32(decibel, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetOutputVolumeConstMeta,
      argValues: [that, decibel],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetOutputVolumeConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_output_volume",
        argNames: ["that", "decibel"],
      );

  @override
  void audioChatSetPlayCustomRingtones(
      {required AudioChat that, required bool play, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_bool(play, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetPlayCustomRingtonesConstMeta,
      argValues: [that, play],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetPlayCustomRingtonesConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_play_custom_ringtones",
        argNames: ["that", "play"],
      );

  @override
  void audioChatSetRmsThreshold(
      {required AudioChat that, required double decimal, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_f_32(decimal, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatSetRmsThresholdConstMeta,
      argValues: [that, decimal],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetRmsThresholdConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_rms_threshold",
        argNames: ["that", "decimal"],
      );

  @override
  Future<void> audioChatSetSigningKey(
      {required AudioChat that, required List<int> key, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kAudioChatSetSigningKeyConstMeta,
      argValues: [that, key],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatSetSigningKeyConstMeta => const TaskConstMeta(
        debugName: "AudioChat_set_signing_key",
        argNames: ["that", "key"],
      );

  @override
  Future<void> audioChatStartSession(
      {required AudioChat that, required Contact contact, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatStartSessionConstMeta,
      argValues: [that, contact],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatStartSessionConstMeta => const TaskConstMeta(
        debugName: "AudioChat_start_session",
        argNames: ["that", "contact"],
      );

  @override
  Future<void> audioChatStopSession(
      {required AudioChat that, required Contact contact, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAudioChatStopSessionConstMeta,
      argValues: [that, contact],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAudioChatStopSessionConstMeta => const TaskConstMeta(
        debugName: "AudioChat_stop_session",
        argNames: ["that", "contact"],
      );

  @override
  Contact contactFromParts(
      {required String id,
      required String nickname,
      required List<int> verifyingKey,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_String(nickname, serializer);
        sse_encode_list_prim_u_8_loose(verifyingKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kContactFromPartsConstMeta,
      argValues: [id, nickname, verifyingKey],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactFromPartsConstMeta => const TaskConstMeta(
        debugName: "Contact_from_parts",
        argNames: ["id", "nickname", "verifyingKey"],
      );

  @override
  String contactId({required Contact that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kContactIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactIdConstMeta => const TaskConstMeta(
        debugName: "Contact_id",
        argNames: ["that"],
      );

  @override
  bool contactKeyEq(
      {required Contact that, required List<int> key, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            that, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kContactKeyEqConstMeta,
      argValues: [that, key],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactKeyEqConstMeta => const TaskConstMeta(
        debugName: "Contact_key_eq",
        argNames: ["that", "key"],
      );

  @override
  Contact contactNew(
      {required String nickname, required List<int> keyBytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(nickname, serializer);
        sse_encode_list_prim_u_8_loose(keyBytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kContactNewConstMeta,
      argValues: [nickname, keyBytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactNewConstMeta => const TaskConstMeta(
        debugName: "Contact_new",
        argNames: ["nickname", "keyBytes"],
      );

  @override
  String contactNickname({required Contact that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kContactNicknameConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactNicknameConstMeta => const TaskConstMeta(
        debugName: "Contact_nickname",
        argNames: ["that"],
      );

  @override
  Contact contactPubClone({required Contact that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact,
        decodeErrorData: null,
      ),
      constMeta: kContactPubCloneConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactPubCloneConstMeta => const TaskConstMeta(
        debugName: "Contact_pub_clone",
        argNames: ["that"],
      );

  @override
  void contactSetNickname(
      {required Contact that, required String nickname, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            that, serializer);
        sse_encode_String(nickname, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kContactSetNicknameConstMeta,
      argValues: [that, nickname],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactSetNicknameConstMeta => const TaskConstMeta(
        debugName: "Contact_set_nickname",
        argNames: ["that", "nickname"],
      );

  @override
  U8Array32 contactVerifyingKey({required Contact that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kContactVerifyingKeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactVerifyingKeyConstMeta => const TaskConstMeta(
        debugName: "Contact_verifying_key",
        argNames: ["that"],
      );

  @override
  U8Array64 generateKeys({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_64,
        decodeErrorData: null,
      ),
      constMeta: kGenerateKeysConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGenerateKeysConstMeta => const TaskConstMeta(
        debugName: "generate_keys",
        argNames: [],
      );

  @override
  Stream<String> sendToDartLoggerSetStreamSink({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSendToDartLoggerSetStreamSinkConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSendToDartLoggerSetStreamSinkConstMeta =>
      const TaskConstMeta(
        debugName: "SendToDartLogger_set_stream_sink",
        argNames: [],
      );

  @override
  Stream<String> createLogStream({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  @override
  Future<void> initLogger({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitLoggerConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  @override
  void rustSetUp({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustSetUpConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustSetUpConstMeta => const TaskConstMeta(
        debugName: "rust_set_up",
        argNames: [],
      );

  @override
  void soundHandleCancel({required SoundHandle that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSoundHandleCancelConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSoundHandleCancelConstMeta => const TaskConstMeta(
        debugName: "SoundHandle_cancel",
        argNames: ["that"],
      );

  @override
  ArcHost soundPlayerHost({required SoundPlayer that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost,
        decodeErrorData: null,
      ),
      constMeta: kSoundPlayerHostConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSoundPlayerHostConstMeta => const TaskConstMeta(
        debugName: "SoundPlayer_host",
        argNames: ["that"],
      );

  @override
  SoundPlayer soundPlayerNew({required double outputVolume, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(outputVolume, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer,
        decodeErrorData: null,
      ),
      constMeta: kSoundPlayerNewConstMeta,
      argValues: [outputVolume],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSoundPlayerNewConstMeta => const TaskConstMeta(
        debugName: "SoundPlayer_new",
        argNames: ["outputVolume"],
      );

  @override
  Future<SoundHandle> soundPlayerPlay(
      {required SoundPlayer that, required List<int> bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
            that, serializer);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle,
        decodeErrorData: null,
      ),
      constMeta: kSoundPlayerPlayConstMeta,
      argValues: [that, bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSoundPlayerPlayConstMeta => const TaskConstMeta(
        debugName: "SoundPlayer_play",
        argNames: ["that", "bytes"],
      );

  @override
  Future<void> soundPlayerUpdateOutputDevice(
      {required SoundPlayer that, String? name, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
            that, serializer);
        sse_encode_opt_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSoundPlayerUpdateOutputDeviceConstMeta,
      argValues: [that, name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSoundPlayerUpdateOutputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_update_output_device",
        argNames: ["that", "name"],
      );

  @override
  void soundPlayerUpdateOutputVolume(
      {required SoundPlayer that, required double volume, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
            that, serializer);
        sse_encode_f_32(volume, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSoundPlayerUpdateOutputVolumeConstMeta,
      argValues: [that, volume],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSoundPlayerUpdateOutputVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_update_output_volume",
        argNames: ["that", "volume"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat_Output_unit(
          FutureOr<void> Function(AudioChat) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
              rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic) encode_DartFn_Inputs_String_Output_unit(
      FutureOr<void> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_bool_Output_unit(
          FutureOr<void> Function(String, bool) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_bool(rawArg1);

      final rawOutput = await raw(arg0, arg1);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Output_bool(
          FutureOr<bool> Function(String, Uint8List?) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_opt_list_prim_u_8_strict(rawArg1);

      final rawOutput = await raw(arg0, arg1);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_bool(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_opt_list_prim_u_8_strict(
      FutureOr<Uint8List?> Function() raw) {
    return (
      callId,
    ) async {
      final rawOutput = await raw();

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_opt_list_prim_u_8_strict(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_unit(FutureOr<void> Function() raw) {
    return (
      callId,
    ) async {
      final rawOutput = await raw();

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic) encode_DartFn_Inputs_bool_Output_unit(
      FutureOr<void> Function(bool) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_bool(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_bool_bool_Output_unit(
          FutureOr<void> Function(bool, bool) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_bool(rawArg0);
      final arg1 = dco_decode_bool(rawArg1);

      final rawOutput = await raw(arg0, arg1);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic) encode_DartFn_Inputs_i_32_Output_unit(
      FutureOr<void> Function(int) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_i_32(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_statistics_Output_unit(
          FutureOr<void> Function(Statistics) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_statistics(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_u_8_array_32_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          FutureOr<Contact?> Function(U8Array32) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_u_8_array_32(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcHost => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcHost => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioChat => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioChat => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Contact => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Contact => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundPlayer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundPlayer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer;

  @protected
  ArcHost
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcHost.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioChat
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioChat.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contact.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandle.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contact.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioChat
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioChat.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contact.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandle.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<void> Function(AudioChat)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat_Output_unit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String) dco_decode_DartFn_Inputs_String_Output_unit(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, bool)
      dco_decode_DartFn_Inputs_String_bool_Output_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(String, Uint8List?)
      dco_decode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Output_bool(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Uint8List?> Function()
      dco_decode_DartFn_Inputs__Output_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function() dco_decode_DartFn_Inputs__Output_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(bool) dco_decode_DartFn_Inputs_bool_Output_unit(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(bool, bool)
      dco_decode_DartFn_Inputs_bool_bool_Output_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(int) dco_decode_DartFn_Inputs_i_32_Output_unit(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(Statistics)
      dco_decode_DartFn_Inputs_statistics_Output_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Contact?> Function(U8Array32)
      dco_decode_DartFn_Inputs_u_8_array_32_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ArcHost
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcHost.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioChat
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioChat.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contact.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandle.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Contact
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
        raw);
  }

  @protected
  DartError dco_decode_dart_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DartError(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Contact?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (List<String>, List<String>) dco_decode_record_list_string_list_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_String(arr[0]),
      dco_decode_list_String(arr[1]),
    );
  }

  @protected
  Statistics dco_decode_statistics(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Statistics(
      rms: dco_decode_f_32(arr[0]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array64 dco_decode_u_8_array_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array64(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  ArcHost
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcHost.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioChat
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioChat.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contact.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandle.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contact.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioChat
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioChat.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contact.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandle.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ArcHost
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcHost.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioChat
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioChat.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contact.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandle.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Contact
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
        deserializer));
  }

  @protected
  DartError sse_decode_dart_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return DartError(message: var_message);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Contact?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (List<String>, List<String>) sse_decode_record_list_string_list_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_String(deserializer);
    var var_field1 = sse_decode_list_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Statistics sse_decode_statistics(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rms = sse_decode_f_32(deserializer);
    return Statistics(rms: var_rms);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  U8Array64 sse_decode_u_8_array_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array64(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost(
          ArcHost self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          AudioChat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          AudioChat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat_Output_unit(
          FutureOr<void> Function(AudioChat) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat_Output_unit(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_unit(
      FutureOr<void> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_bool_Output_unit(
      FutureOr<void> Function(String, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_bool_Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Output_bool(
      FutureOr<bool> Function(String, Uint8List?) self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Output_bool(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_opt_list_prim_u_8_strict(
      FutureOr<Uint8List?> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_opt_list_prim_u_8_strict(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_unit(
      FutureOr<void> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(encode_DartFn_Inputs__Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_bool_Output_unit(
      FutureOr<void> Function(bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_bool_Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_bool_bool_Output_unit(
      FutureOr<void> Function(bool, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_bool_bool_Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_i_32_Output_unit(
      FutureOr<void> Function(int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_i_32_Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_statistics_Output_unit(
      FutureOr<void> Function(Statistics) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_statistics_Output_unit(self), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_u_8_array_32_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          FutureOr<Contact?> Function(U8Array32) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_u_8_array_32_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        PlatformPointerUtil.ptrToInt(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcHost(
          ArcHost self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAudioChat(
          AudioChat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
        self, serializer);
  }

  @protected
  void sse_encode_dart_error(DartError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          Contact? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContact(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_record_list_string_list_string(
      (List<String>, List<String>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.$1, serializer);
    sse_encode_list_String(self.$2, serializer);
  }

  @protected
  void sse_encode_statistics(Statistics self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.rms, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_64(U8Array64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }
}
