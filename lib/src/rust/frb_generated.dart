// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/audio_chat.dart';
import 'api/contact.dart';
import 'api/crypto.dart';
import 'api/error.dart';
import 'api/logger.dart';
import 'api/overlay/overlay.dart';
import 'api/player.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.36';

  @override
  int get rustContentHash => 1748919714;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'audio_chat',
    ioDirectory: 'rust/audio_chat/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiAudioChatAudioChatAudioTest(
      {required AudioChat that, dynamic hint});

  Future<ChatMessage> crateApiAudioChatAudioChatBuildChat(
      {required AudioChat that,
      required Contact contact,
      required String text,
      dynamic hint});

  void crateApiAudioChatAudioChatEndCall(
      {required AudioChat that, dynamic hint});

  Future<(List<String>, List<String>)> crateApiAudioChatAudioChatListDevices(
      {required AudioChat that, dynamic hint});

  Future<AudioChat> crateApiAudioChatAudioChatNew(
      {required List<int> identity,
      required ArcHost host,
      required NetworkConfig networkConfig,
      required Overlay overlay,
      required FutureOr<bool> Function(String, Uint8List?, DartNotify)
          acceptCall,
      required FutureOr<void> Function(String, bool) callEnded,
      required FutureOr<Contact?> Function(Uint8List) getContact,
      required FutureOr<void> Function() connected,
      required FutureOr<void> Function(bool) callState,
      required FutureOr<void> Function(String, String) sessionStatus,
      required FutureOr<void> Function(AudioChat) startSessions,
      required FutureOr<Uint8List?> Function() loadRingtone,
      required FutureOr<void> Function(Statistics) statistics,
      required FutureOr<void> Function(ChatMessage) messageReceived,
      required FutureOr<void> Function(bool, bool) managerActive,
      required FutureOr<void> Function(Contact) callStarted,
      dynamic hint});

  Future<void> crateApiAudioChatAudioChatRestartManager(
      {required AudioChat that, dynamic hint});

  Future<void> crateApiAudioChatAudioChatSayHello(
      {required AudioChat that, required Contact contact, dynamic hint});

  Future<void> crateApiAudioChatAudioChatSendChat(
      {required AudioChat that, required ChatMessage message, dynamic hint});

  void crateApiAudioChatAudioChatSetDeafened(
      {required AudioChat that, required bool deafened, dynamic hint});

  void crateApiAudioChatAudioChatSetDenoise(
      {required AudioChat that, required bool denoise, dynamic hint});

  Future<void> crateApiAudioChatAudioChatSetIdentity(
      {required AudioChat that, required List<int> key, dynamic hint});

  Future<void> crateApiAudioChatAudioChatSetInputDevice(
      {required AudioChat that, String? device, dynamic hint});

  void crateApiAudioChatAudioChatSetInputVolume(
      {required AudioChat that, required double decibel, dynamic hint});

  Future<void> crateApiAudioChatAudioChatSetModel(
      {required AudioChat that, required List<int> model, dynamic hint});

  void crateApiAudioChatAudioChatSetMuted(
      {required AudioChat that, required bool muted, dynamic hint});

  Future<void> crateApiAudioChatAudioChatSetOutputDevice(
      {required AudioChat that, String? device, dynamic hint});

  void crateApiAudioChatAudioChatSetOutputVolume(
      {required AudioChat that, required double decibel, dynamic hint});

  void crateApiAudioChatAudioChatSetPlayCustomRingtones(
      {required AudioChat that, required bool play, dynamic hint});

  void crateApiAudioChatAudioChatSetRmsThreshold(
      {required AudioChat that, required double decimal, dynamic hint});

  Future<void> crateApiAudioChatAudioChatStartSession(
      {required AudioChat that, required Contact contact, dynamic hint});

  Future<void> crateApiAudioChatAudioChatStopSession(
      {required AudioChat that, required Contact contact, dynamic hint});

  String crateApiAudioChatChatMessageGetText(
      {required ChatMessage that, dynamic hint});

  bool crateApiAudioChatChatMessageIsSender(
      {required ChatMessage that, required String identity, dynamic hint});

  void crateApiAudioChatChatMessageSetText(
      {required ChatMessage that, required String text, dynamic hint});

  String crateApiAudioChatChatMessageTime(
      {required ChatMessage that, dynamic hint});

  Future<void> crateApiAudioChatDartNotifyNotified(
      {required DartNotify that, dynamic hint});

  Future<String> crateApiAudioChatNetworkConfigGetRelayAddress(
      {required NetworkConfig that, dynamic hint});

  Future<String> crateApiAudioChatNetworkConfigGetRelayId(
      {required NetworkConfig that, dynamic hint});

  NetworkConfig crateApiAudioChatNetworkConfigNew(
      {required String relayAddress, required String relayId, dynamic hint});

  Future<void> crateApiAudioChatNetworkConfigSetRelayAddress(
      {required NetworkConfig that,
      required String relayAddress,
      dynamic hint});

  Future<void> crateApiAudioChatNetworkConfigSetRelayId(
      {required NetworkConfig that, required String relayId, dynamic hint});

  Contact crateApiContactContactFromParts(
      {required String id,
      required String nickname,
      required String peerId,
      dynamic hint});

  String crateApiContactContactId({required Contact that, dynamic hint});

  bool crateApiContactContactIdEq(
      {required Contact that, required List<int> id, dynamic hint});

  Contact crateApiContactContactNew(
      {required String nickname, required String peerId, dynamic hint});

  String crateApiContactContactNickname({required Contact that, dynamic hint});

  String crateApiContactContactPeerId({required Contact that, dynamic hint});

  Contact crateApiContactContactPubClone({required Contact that, dynamic hint});

  void crateApiContactContactSetNickname(
      {required Contact that, required String nickname, dynamic hint});

  (String, Uint8List) crateApiCryptoGenerateKeys({dynamic hint});

  Stream<String> crateApiLoggerCreateLogStream({dynamic hint});

  Future<void> crateApiLoggerInitLogger({dynamic hint});

  void crateApiLoggerRustSetUp({dynamic hint});

  Stream<String> crateApiLoggerSendToDartLoggerSetStreamSink({dynamic hint});

  Future<void> crateApiOverlayOverlayOverlayDisable(
      {required Overlay that, dynamic hint});

  Future<void> crateApiOverlayOverlayOverlayEnable(
      {required Overlay that, dynamic hint});

  Future<void> crateApiOverlayOverlayOverlayHide(
      {required Overlay that, dynamic hint});

  Future<void> crateApiOverlayOverlayOverlayMoveOverlay(
      {required Overlay that,
      required int x,
      required int y,
      required int width,
      required int height,
      dynamic hint});

  Future<Overlay> crateApiOverlayOverlayOverlayNew(
      {required bool enabled,
      required int x,
      required int y,
      required int width,
      required int height,
      required int fontHeight,
      required int backgroundColor,
      required int fontColor,
      dynamic hint});

  (int, int) crateApiOverlayOverlayOverlayScreenResolution(
      {required Overlay that, dynamic hint});

  Future<void> crateApiOverlayOverlayOverlaySetBackgroundColor(
      {required Overlay that, required int backgroundColor, dynamic hint});

  Future<void> crateApiOverlayOverlayOverlaySetFontColor(
      {required Overlay that, required int fontColor, dynamic hint});

  Future<void> crateApiOverlayOverlayOverlaySetFontHeight(
      {required Overlay that, required int height, dynamic hint});

  Future<void> crateApiOverlayOverlayOverlayShow(
      {required Overlay that, dynamic hint});

  void crateApiPlayerSoundHandleCancel(
      {required SoundHandle that, dynamic hint});

  ArcHost crateApiPlayerSoundPlayerHost(
      {required SoundPlayer that, dynamic hint});

  SoundPlayer crateApiPlayerSoundPlayerNew(
      {required double outputVolume, dynamic hint});

  Future<SoundHandle> crateApiPlayerSoundPlayerPlay(
      {required SoundPlayer that, required List<int> bytes, dynamic hint});

  Future<void> crateApiPlayerSoundPlayerUpdateOutputDevice(
      {required SoundPlayer that, String? name, dynamic hint});

  void crateApiPlayerSoundPlayerUpdateOutputVolume(
      {required SoundPlayer that, required double volume, dynamic hint});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcHost;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcHost;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcHostPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioChat;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioChat;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioChatPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChatMessage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChatMessage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChatMessagePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Contact;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Contact;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ContactPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DartNotify;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DartNotify;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DartNotifyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NetworkConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NetworkConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NetworkConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Overlay;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Overlay;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OverlayPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SoundHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundPlayer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SoundPlayerPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiAudioChatAudioChatAudioTest(
      {required AudioChat that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatAudioChatAudioTestConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatAudioTestConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_audio_test",
        argNames: ["that"],
      );

  @override
  Future<ChatMessage> crateApiAudioChatAudioChatBuildChat(
      {required AudioChat that,
      required Contact contact,
      required String text,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        sse_encode_String(text, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatBuildChatConstMeta,
      argValues: [that, contact, text],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatBuildChatConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_build_chat",
        argNames: ["that", "contact", "text"],
      );

  @override
  void crateApiAudioChatAudioChatEndCall(
      {required AudioChat that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatEndCallConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatEndCallConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_end_call",
        argNames: ["that"],
      );

  @override
  Future<(List<String>, List<String>)> crateApiAudioChatAudioChatListDevices(
      {required AudioChat that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_list_string_list_string,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatAudioChatListDevicesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatListDevicesConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_list_devices",
        argNames: ["that"],
      );

  @override
  Future<AudioChat> crateApiAudioChatAudioChatNew(
      {required List<int> identity,
      required ArcHost host,
      required NetworkConfig networkConfig,
      required Overlay overlay,
      required FutureOr<bool> Function(String, Uint8List?, DartNotify)
          acceptCall,
      required FutureOr<void> Function(String, bool) callEnded,
      required FutureOr<Contact?> Function(Uint8List) getContact,
      required FutureOr<void> Function() connected,
      required FutureOr<void> Function(bool) callState,
      required FutureOr<void> Function(String, String) sessionStatus,
      required FutureOr<void> Function(AudioChat) startSessions,
      required FutureOr<Uint8List?> Function() loadRingtone,
      required FutureOr<void> Function(Statistics) statistics,
      required FutureOr<void> Function(ChatMessage) messageReceived,
      required FutureOr<void> Function(bool, bool) managerActive,
      required FutureOr<void> Function(Contact) callStarted,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(identity, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
            host, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            networkConfig, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            overlay, serializer);
        sse_encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
            acceptCall, serializer);
        sse_encode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(
            callEnded, serializer);
        sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
            getContact, serializer);
        sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
            connected, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            callState, serializer);
        sse_encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
            sessionStatus, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat_Output_unit_AnyhowException(
            startSessions, serializer);
        sse_encode_DartFn_Inputs__Output_opt_list_prim_u_8_strict_AnyhowException(
            loadRingtone, serializer);
        sse_encode_DartFn_Inputs_statistics_Output_unit_AnyhowException(
            statistics, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
            messageReceived, serializer);
        sse_encode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(
            managerActive, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_Output_unit_AnyhowException(
            callStarted, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatNewConstMeta,
      argValues: [
        identity,
        host,
        networkConfig,
        overlay,
        acceptCall,
        callEnded,
        getContact,
        connected,
        callState,
        sessionStatus,
        startSessions,
        loadRingtone,
        statistics,
        messageReceived,
        managerActive,
        callStarted
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatNewConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_new",
        argNames: [
          "identity",
          "host",
          "networkConfig",
          "overlay",
          "acceptCall",
          "callEnded",
          "getContact",
          "connected",
          "callState",
          "sessionStatus",
          "startSessions",
          "loadRingtone",
          "statistics",
          "messageReceived",
          "managerActive",
          "callStarted"
        ],
      );

  @override
  Future<void> crateApiAudioChatAudioChatRestartManager(
      {required AudioChat that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatAudioChatRestartManagerConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatRestartManagerConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_restart_manager",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiAudioChatAudioChatSayHello(
      {required AudioChat that, required Contact contact, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatAudioChatSayHelloConstMeta,
      argValues: [that, contact],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSayHelloConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_say_hello",
        argNames: ["that", "contact"],
      );

  @override
  Future<void> crateApiAudioChatAudioChatSendChat(
      {required AudioChat that, required ChatMessage message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatAudioChatSendChatConstMeta,
      argValues: [that, message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSendChatConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_send_chat",
        argNames: ["that", "message"],
      );

  @override
  void crateApiAudioChatAudioChatSetDeafened(
      {required AudioChat that, required bool deafened, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_bool(deafened, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetDeafenedConstMeta,
      argValues: [that, deafened],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetDeafenedConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_deafened",
        argNames: ["that", "deafened"],
      );

  @override
  void crateApiAudioChatAudioChatSetDenoise(
      {required AudioChat that, required bool denoise, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_bool(denoise, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetDenoiseConstMeta,
      argValues: [that, denoise],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetDenoiseConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_denoise",
        argNames: ["that", "denoise"],
      );

  @override
  Future<void> crateApiAudioChatAudioChatSetIdentity(
      {required AudioChat that, required List<int> key, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetIdentityConstMeta,
      argValues: [that, key],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetIdentityConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_identity",
        argNames: ["that", "key"],
      );

  @override
  Future<void> crateApiAudioChatAudioChatSetInputDevice(
      {required AudioChat that, String? device, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_opt_String(device, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetInputDeviceConstMeta,
      argValues: [that, device],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetInputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_input_device",
        argNames: ["that", "device"],
      );

  @override
  void crateApiAudioChatAudioChatSetInputVolume(
      {required AudioChat that, required double decibel, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_f_32(decibel, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetInputVolumeConstMeta,
      argValues: [that, decibel],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetInputVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_input_volume",
        argNames: ["that", "decibel"],
      );

  @override
  Future<void> crateApiAudioChatAudioChatSetModel(
      {required AudioChat that, required List<int> model, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_list_prim_u_8_loose(model, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetModelConstMeta,
      argValues: [that, model],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetModelConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_model",
        argNames: ["that", "model"],
      );

  @override
  void crateApiAudioChatAudioChatSetMuted(
      {required AudioChat that, required bool muted, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_bool(muted, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetMutedConstMeta,
      argValues: [that, muted],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetMutedConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_muted",
        argNames: ["that", "muted"],
      );

  @override
  Future<void> crateApiAudioChatAudioChatSetOutputDevice(
      {required AudioChat that, String? device, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_opt_String(device, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetOutputDeviceConstMeta,
      argValues: [that, device],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetOutputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_output_device",
        argNames: ["that", "device"],
      );

  @override
  void crateApiAudioChatAudioChatSetOutputVolume(
      {required AudioChat that, required double decibel, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_f_32(decibel, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetOutputVolumeConstMeta,
      argValues: [that, decibel],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetOutputVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_output_volume",
        argNames: ["that", "decibel"],
      );

  @override
  void crateApiAudioChatAudioChatSetPlayCustomRingtones(
      {required AudioChat that, required bool play, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_bool(play, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetPlayCustomRingtonesConstMeta,
      argValues: [that, play],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiAudioChatAudioChatSetPlayCustomRingtonesConstMeta =>
          const TaskConstMeta(
            debugName: "AudioChat_set_play_custom_ringtones",
            argNames: ["that", "play"],
          );

  @override
  void crateApiAudioChatAudioChatSetRmsThreshold(
      {required AudioChat that, required double decimal, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_f_32(decimal, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatSetRmsThresholdConstMeta,
      argValues: [that, decimal],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatSetRmsThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_set_rms_threshold",
        argNames: ["that", "decimal"],
      );

  @override
  Future<void> crateApiAudioChatAudioChatStartSession(
      {required AudioChat that, required Contact contact, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatStartSessionConstMeta,
      argValues: [that, contact],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatStartSessionConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_start_session",
        argNames: ["that", "contact"],
      );

  @override
  Future<void> crateApiAudioChatAudioChatStopSession(
      {required AudioChat that, required Contact contact, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            contact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatAudioChatStopSessionConstMeta,
      argValues: [that, contact],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatAudioChatStopSessionConstMeta =>
      const TaskConstMeta(
        debugName: "AudioChat_stop_session",
        argNames: ["that", "contact"],
      );

  @override
  String crateApiAudioChatChatMessageGetText(
      {required ChatMessage that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatChatMessageGetTextConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatChatMessageGetTextConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_get_text",
        argNames: ["that"],
      );

  @override
  bool crateApiAudioChatChatMessageIsSender(
      {required ChatMessage that, required String identity, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        sse_encode_String(identity, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatChatMessageIsSenderConstMeta,
      argValues: [that, identity],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatChatMessageIsSenderConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_is_sender",
        argNames: ["that", "identity"],
      );

  @override
  void crateApiAudioChatChatMessageSetText(
      {required ChatMessage that, required String text, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        sse_encode_String(text, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatChatMessageSetTextConstMeta,
      argValues: [that, text],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatChatMessageSetTextConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_set_text",
        argNames: ["that", "text"],
      );

  @override
  String crateApiAudioChatChatMessageTime(
      {required ChatMessage that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatChatMessageTimeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatChatMessageTimeConstMeta =>
      const TaskConstMeta(
        debugName: "ChatMessage_time",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiAudioChatDartNotifyNotified(
      {required DartNotify that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatDartNotifyNotifiedConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatDartNotifyNotifiedConstMeta =>
      const TaskConstMeta(
        debugName: "DartNotify_notified",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiAudioChatNetworkConfigGetRelayAddress(
      {required NetworkConfig that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatNetworkConfigGetRelayAddressConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatNetworkConfigGetRelayAddressConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_get_relay_address",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiAudioChatNetworkConfigGetRelayId(
      {required NetworkConfig that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAudioChatNetworkConfigGetRelayIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatNetworkConfigGetRelayIdConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_get_relay_id",
        argNames: ["that"],
      );

  @override
  NetworkConfig crateApiAudioChatNetworkConfigNew(
      {required String relayAddress, required String relayId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(relayAddress, serializer);
        sse_encode_String(relayId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatNetworkConfigNewConstMeta,
      argValues: [relayAddress, relayId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatNetworkConfigNewConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_new",
        argNames: ["relayAddress", "relayId"],
      );

  @override
  Future<void> crateApiAudioChatNetworkConfigSetRelayAddress(
      {required NetworkConfig that,
      required String relayAddress,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            that, serializer);
        sse_encode_String(relayAddress, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatNetworkConfigSetRelayAddressConstMeta,
      argValues: [that, relayAddress],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatNetworkConfigSetRelayAddressConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_set_relay_address",
        argNames: ["that", "relayAddress"],
      );

  @override
  Future<void> crateApiAudioChatNetworkConfigSetRelayId(
      {required NetworkConfig that, required String relayId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
            that, serializer);
        sse_encode_String(relayId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiAudioChatNetworkConfigSetRelayIdConstMeta,
      argValues: [that, relayId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAudioChatNetworkConfigSetRelayIdConstMeta =>
      const TaskConstMeta(
        debugName: "NetworkConfig_set_relay_id",
        argNames: ["that", "relayId"],
      );

  @override
  Contact crateApiContactContactFromParts(
      {required String id,
      required String nickname,
      required String peerId,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_String(nickname, serializer);
        sse_encode_String(peerId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiContactContactFromPartsConstMeta,
      argValues: [id, nickname, peerId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiContactContactFromPartsConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_from_parts",
        argNames: ["id", "nickname", "peerId"],
      );

  @override
  String crateApiContactContactId({required Contact that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiContactContactIdConstMeta => const TaskConstMeta(
        debugName: "Contact_id",
        argNames: ["that"],
      );

  @override
  bool crateApiContactContactIdEq(
      {required Contact that, required List<int> id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        sse_encode_list_prim_u_8_loose(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactIdEqConstMeta,
      argValues: [that, id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiContactContactIdEqConstMeta => const TaskConstMeta(
        debugName: "Contact_id_eq",
        argNames: ["that", "id"],
      );

  @override
  Contact crateApiContactContactNew(
      {required String nickname, required String peerId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(nickname, serializer);
        sse_encode_String(peerId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiContactContactNewConstMeta,
      argValues: [nickname, peerId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiContactContactNewConstMeta => const TaskConstMeta(
        debugName: "Contact_new",
        argNames: ["nickname", "peerId"],
      );

  @override
  String crateApiContactContactNickname({required Contact that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactNicknameConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiContactContactNicknameConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_nickname",
        argNames: ["that"],
      );

  @override
  String crateApiContactContactPeerId({required Contact that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactPeerIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiContactContactPeerIdConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_peer_id",
        argNames: ["that"],
      );

  @override
  Contact crateApiContactContactPubClone(
      {required Contact that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactPubCloneConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiContactContactPubCloneConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_pub_clone",
        argNames: ["that"],
      );

  @override
  void crateApiContactContactSetNickname(
      {required Contact that, required String nickname, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            that, serializer);
        sse_encode_String(nickname, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiContactContactSetNicknameConstMeta,
      argValues: [that, nickname],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiContactContactSetNicknameConstMeta =>
      const TaskConstMeta(
        debugName: "Contact_set_nickname",
        argNames: ["that", "nickname"],
      );

  @override
  (String, Uint8List) crateApiCryptoGenerateKeys({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_list_prim_u_8_strict,
        decodeErrorData: sse_decode_dart_error,
      ),
      constMeta: kCrateApiCryptoGenerateKeysConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiCryptoGenerateKeysConstMeta => const TaskConstMeta(
        debugName: "generate_keys",
        argNames: [],
      );

  @override
  Stream<String> crateApiLoggerCreateLogStream({dynamic hint}) {
    final s = RustStreamSink<String>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerCreateLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiLoggerCreateLogStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s"],
      );

  @override
  Future<void> crateApiLoggerInitLogger({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerInitLoggerConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiLoggerInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  @override
  void crateApiLoggerRustSetUp({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerRustSetUpConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiLoggerRustSetUpConstMeta => const TaskConstMeta(
        debugName: "rust_set_up",
        argNames: [],
      );

  @override
  Stream<String> crateApiLoggerSendToDartLoggerSetStreamSink({dynamic hint}) {
    final streamSink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(streamSink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerSendToDartLoggerSetStreamSinkConstMeta,
      argValues: [streamSink],
      apiImpl: this,
      hint: hint,
    )));
    return streamSink.stream;
  }

  TaskConstMeta get kCrateApiLoggerSendToDartLoggerSetStreamSinkConstMeta =>
      const TaskConstMeta(
        debugName: "send_to_dart_logger_set_stream_sink",
        argNames: ["streamSink"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayDisable(
      {required Overlay that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayDisableConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayDisableConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_disable",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayEnable(
      {required Overlay that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayEnableConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayEnableConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_enable",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayHide(
      {required Overlay that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayHideConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayHideConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_hide",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayMoveOverlay(
      {required Overlay that,
      required int x,
      required int y,
      required int width,
      required int height,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        sse_encode_i_32(x, serializer);
        sse_encode_i_32(y, serializer);
        sse_encode_i_32(width, serializer);
        sse_encode_i_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayMoveOverlayConstMeta,
      argValues: [that, x, y, width, height],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayMoveOverlayConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_move_overlay",
        argNames: ["that", "x", "y", "width", "height"],
      );

  @override
  Future<Overlay> crateApiOverlayOverlayOverlayNew(
      {required bool enabled,
      required int x,
      required int y,
      required int width,
      required int height,
      required int fontHeight,
      required int backgroundColor,
      required int fontColor,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(enabled, serializer);
        sse_encode_i_32(x, serializer);
        sse_encode_i_32(y, serializer);
        sse_encode_i_32(width, serializer);
        sse_encode_i_32(height, serializer);
        sse_encode_i_32(fontHeight, serializer);
        sse_encode_u_32(backgroundColor, serializer);
        sse_encode_u_32(fontColor, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayNewConstMeta,
      argValues: [
        enabled,
        x,
        y,
        width,
        height,
        fontHeight,
        backgroundColor,
        fontColor
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayNewConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_new",
        argNames: [
          "enabled",
          "x",
          "y",
          "width",
          "height",
          "fontHeight",
          "backgroundColor",
          "fontColor"
        ],
      );

  @override
  (int, int) crateApiOverlayOverlayOverlayScreenResolution(
      {required Overlay that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayScreenResolutionConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayScreenResolutionConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_screen_resolution",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlaySetBackgroundColor(
      {required Overlay that, required int backgroundColor, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        sse_encode_u_32(backgroundColor, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlaySetBackgroundColorConstMeta,
      argValues: [that, backgroundColor],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlaySetBackgroundColorConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_set_background_color",
        argNames: ["that", "backgroundColor"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlaySetFontColor(
      {required Overlay that, required int fontColor, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        sse_encode_u_32(fontColor, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlaySetFontColorConstMeta,
      argValues: [that, fontColor],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlaySetFontColorConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_set_font_color",
        argNames: ["that", "fontColor"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlaySetFontHeight(
      {required Overlay that, required int height, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        sse_encode_i_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlaySetFontHeightConstMeta,
      argValues: [that, height],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlaySetFontHeightConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_set_font_height",
        argNames: ["that", "height"],
      );

  @override
  Future<void> crateApiOverlayOverlayOverlayShow(
      {required Overlay that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOverlayOverlayOverlayShowConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOverlayOverlayOverlayShowConstMeta =>
      const TaskConstMeta(
        debugName: "Overlay_show",
        argNames: ["that"],
      );

  @override
  void crateApiPlayerSoundHandleCancel(
      {required SoundHandle that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundHandleCancelConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundHandleCancelConstMeta =>
      const TaskConstMeta(
        debugName: "SoundHandle_cancel",
        argNames: ["that"],
      );

  @override
  ArcHost crateApiPlayerSoundPlayerHost(
      {required SoundPlayer that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerHostConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerHostConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_host",
        argNames: ["that"],
      );

  @override
  SoundPlayer crateApiPlayerSoundPlayerNew(
      {required double outputVolume, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(outputVolume, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerNewConstMeta,
      argValues: [outputVolume],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerNewConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_new",
        argNames: ["outputVolume"],
      );

  @override
  Future<SoundHandle> crateApiPlayerSoundPlayerPlay(
      {required SoundPlayer that, required List<int> bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
            that, serializer);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerPlayConstMeta,
      argValues: [that, bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerPlayConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_play",
        argNames: ["that", "bytes"],
      );

  @override
  Future<void> crateApiPlayerSoundPlayerUpdateOutputDevice(
      {required SoundPlayer that, String? name, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
            that, serializer);
        sse_encode_opt_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerUpdateOutputDeviceConstMeta,
      argValues: [that, name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerUpdateOutputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_update_output_device",
        argNames: ["that", "name"],
      );

  @override
  void crateApiPlayerSoundPlayerUpdateOutputVolume(
      {required SoundPlayer that, required double volume, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
            that, serializer);
        sse_encode_f_32(volume, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerSoundPlayerUpdateOutputVolumeConstMeta,
      argValues: [that, volume],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiPlayerSoundPlayerUpdateOutputVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "SoundPlayer_update_output_volume",
        argNames: ["that", "volume"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat_Output_unit_AnyhowException(
          FutureOr<void> Function(AudioChat) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
              rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
          FutureOr<void> Function(ChatMessage) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
              rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_Output_unit_AnyhowException(
          FutureOr<void> Function(Contact) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
              rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
          FutureOr<void> Function(String, String) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_String(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(String, bool) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_bool(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic, dynamic)
      encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
          FutureOr<bool> Function(String, Uint8List?, DartNotify) raw) {
    return (callId, rawArg0, rawArg1, rawArg2) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_opt_list_prim_u_8_strict(rawArg1);
      final arg2 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
              rawArg2);

      Box<bool>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1, arg2));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_bool(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_opt_list_prim_u_8_strict_AnyhowException(
      FutureOr<Uint8List?> Function() raw) {
    return (
      callId,
    ) async {
      Box<Uint8List?>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_opt_list_prim_u_8_strict(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_unit_AnyhowException(
      FutureOr<void> Function() raw) {
    return (
      callId,
    ) async {
      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(bool) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_bool(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(bool, bool) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_bool(rawArg0);
      final arg1 = dco_decode_bool(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
          FutureOr<Contact?> Function(Uint8List) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_list_prim_u_8_strict(rawArg0);

      Box<Contact?>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_statistics_Output_unit_AnyhowException(
          FutureOr<void> Function(Statistics) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_statistics(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcHost => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcHost => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioChat => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioChat => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChatMessage => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChatMessage => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Contact => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Contact => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DartNotify => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DartNotify => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NetworkConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NetworkConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Overlay => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Overlay => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SoundPlayer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SoundPlayer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcHost
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcHost.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioChat
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioChat.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessage.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contact.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DartNotify
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartNotify.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NetworkConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NetworkConfig.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Overlay
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Overlay.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandle.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessage.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contact.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioChat
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioChat.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessage.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contact.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DartNotify
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartNotify.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NetworkConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NetworkConfig.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Overlay
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Overlay.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandle.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<void> Function(AudioChat)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(ChatMessage)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(Contact)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, String)
      dco_decode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, bool)
      dco_decode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(String, Uint8List?, DartNotify)
      dco_decode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Uint8List?> Function()
      dco_decode_DartFn_Inputs__Output_opt_list_prim_u_8_strict_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function()
      dco_decode_DartFn_Inputs__Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(bool)
      dco_decode_DartFn_Inputs_bool_Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(bool, bool)
      dco_decode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Contact?> Function(Uint8List)
      dco_decode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(Statistics)
      dco_decode_DartFn_Inputs_statistics_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ArcHost
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcHost.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioChat
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioChat.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessage.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contact
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contact.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DartNotify
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartNotify.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NetworkConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NetworkConfig.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Overlay
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Overlay.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundHandle.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SoundPlayer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SoundPlayer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Contact
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
        raw);
  }

  @protected
  DartError dco_decode_dart_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DartError(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Contact?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
            raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (int, int) dco_decode_record_i_32_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_32(arr[1]),
    );
  }

  @protected
  (List<String>, List<String>) dco_decode_record_list_string_list_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_String(arr[0]),
      dco_decode_list_String(arr[1]),
    );
  }

  @protected
  (String, Uint8List) dco_decode_record_string_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  SendToDartLogger dco_decode_send_to_dart_logger(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return SendToDartLogger();
  }

  @protected
  Statistics dco_decode_statistics(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Statistics(
      inputLevel: dco_decode_f_32(arr[0]),
      outputLevel: dco_decode_f_32(arr[1]),
      latency: dco_decode_usize(arr[2]),
      uploadBandwidth: dco_decode_usize(arr[3]),
      downloadBandwidth: dco_decode_usize(arr[4]),
      loss: dco_decode_f_64(arr[5]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcHost
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcHost.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioChat
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioChat.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChatMessage
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessage.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contact.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartNotify
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartNotify.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NetworkConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NetworkConfig.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Overlay
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Overlay.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandle.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChatMessage
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessage.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contact.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioChat
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioChat.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChatMessage
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessage.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contact.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartNotify
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartNotify.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NetworkConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NetworkConfig.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Overlay
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Overlay.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandle.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ArcHost
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcHost.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioChat
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioChat.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChatMessage
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessage.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contact
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contact.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartNotify
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartNotify.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NetworkConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NetworkConfig.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Overlay
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Overlay.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundHandle.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SoundPlayer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SoundPlayer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Contact
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
        deserializer));
  }

  @protected
  DartError sse_decode_dart_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return DartError(message: var_message);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Contact?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (int, int) sse_decode_record_i_32_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (List<String>, List<String>) sse_decode_record_list_string_list_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_String(deserializer);
    var var_field1 = sse_decode_list_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, Uint8List) sse_decode_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SendToDartLogger sse_decode_send_to_dart_logger(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SendToDartLogger();
  }

  @protected
  Statistics sse_decode_statistics(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputLevel = sse_decode_f_32(deserializer);
    var var_outputLevel = sse_decode_f_32(deserializer);
    var var_latency = sse_decode_usize(deserializer);
    var var_uploadBandwidth = sse_decode_usize(deserializer);
    var var_downloadBandwidth = sse_decode_usize(deserializer);
    var var_loss = sse_decode_f_64(deserializer);
    return Statistics(
        inputLevel: var_inputLevel,
        outputLevel: var_outputLevel,
        latency: var_latency,
        uploadBandwidth: var_uploadBandwidth,
        downloadBandwidth: var_downloadBandwidth,
        loss: var_loss);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          ArcHost self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          AudioChat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          DartNotify self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          NetworkConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          Overlay self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          AudioChat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          DartNotify self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          NetworkConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          Overlay self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat_Output_unit_AnyhowException(
          FutureOr<void> Function(AudioChat) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
          FutureOr<void> Function(ChatMessage) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_Output_unit_AnyhowException(
          FutureOr<void> Function(Contact) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
      FutureOr<void> Function(String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(
      FutureOr<void> Function(String, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_bool_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
          FutureOr<bool> Function(String, Uint8List?, DartNotify) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_opt_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify_Output_bool_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs__Output_opt_list_prim_u_8_strict_AnyhowException(
          FutureOr<Uint8List?> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_opt_list_prim_u_8_strict_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
      FutureOr<void> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_unit_AnyhowException(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
      FutureOr<void> Function(bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_bool_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(
      FutureOr<void> Function(bool, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_bool_bool_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
          FutureOr<Contact?> Function(Uint8List) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_statistics_Output_unit_AnyhowException(
      FutureOr<void> Function(Statistics) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_statistics_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcHost(
          ArcHost self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioChat(
          AudioChat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
          ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartNotify(
          DartNotify self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNetworkConfig(
          NetworkConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOverlay(
          Overlay self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundHandle(
          SoundHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSoundPlayer(
          SoundPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_String, decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
        self, serializer);
  }

  @protected
  void sse_encode_dart_error(DartError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          Contact? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContact(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_record_i_32_i_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_list_string_list_string(
      (List<String>, List<String>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.$1, serializer);
    sse_encode_list_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_list_prim_u_8_strict(
      (String, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_send_to_dart_logger(
      SendToDartLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_statistics(Statistics self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.inputLevel, serializer);
    sse_encode_f_32(self.outputLevel, serializer);
    sse_encode_usize(self.latency, serializer);
    sse_encode_usize(self.uploadBandwidth, serializer);
    sse_encode_usize(self.downloadBandwidth, serializer);
    sse_encode_f_64(self.loss, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}
