// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Contact>>
@sealed
class Contact extends RustOpaque {
  Contact.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Contact.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Contact,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Contact,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContactPtr,
  );

  String addressStr({dynamic hint}) => RustLib.instance.api.contactAddressStr(
        that: this,
      );

  String id({dynamic hint}) => RustLib.instance.api.contactId(
        that: this,
      );

  String ipStr({dynamic hint}) => RustLib.instance.api.contactIpStr(
        that: this,
      );

  factory Contact(
          {required String nickname,
          required String verifyingKey,
          required String address,
          dynamic hint}) =>
      RustLib.instance.api.contactNew(
          nickname: nickname,
          verifyingKey: verifyingKey,
          address: address,
          hint: hint);

  String nickname({dynamic hint}) => RustLib.instance.api.contactNickname(
        that: this,
      );

  static Contact parse({required String s, dynamic hint}) =>
      RustLib.instance.api.contactParse(s: s, hint: hint);

  Contact pubClone({dynamic hint}) => RustLib.instance.api.contactPubClone(
        that: this,
      );

  void setAddress({required String address, dynamic hint}) =>
      RustLib.instance.api.contactSetAddress(
        that: this,
        address: address,
      );

  void setNickname({required String nickname, dynamic hint}) =>
      RustLib.instance.api.contactSetNickname(
        that: this,
        nickname: nickname,
      );

  String store({dynamic hint}) => RustLib.instance.api.contactStore(
        that: this,
      );

  Uint8List verifyingKey({dynamic hint}) =>
      RustLib.instance.api.contactVerifyingKey(
        that: this,
      );

  String verifyingKeyStr({dynamic hint}) =>
      RustLib.instance.api.contactVerifyingKeyStr(
        that: this,
      );
}
