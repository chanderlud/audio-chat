// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Contact>>
@sealed
class Contact extends RustOpaque {
  Contact.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Contact.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Contact,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Contact,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContactPtr,
  );

  static Contact fromParts(
          {required String id,
          required String nickname,
          required String peerId,
          dynamic hint}) =>
      RustLib.instance.api.contactFromParts(
          id: id, nickname: nickname, peerId: peerId, hint: hint);

  String id({dynamic hint}) =>
      RustLib.instance.api.contactId(that: this, hint: hint);

  bool idEq({required List<int> id, dynamic hint}) =>
      RustLib.instance.api.contactIdEq(that: this, id: id, hint: hint);

  factory Contact(
          {required String nickname, required String peerId, dynamic hint}) =>
      RustLib.instance.api
          .contactNew(nickname: nickname, peerId: peerId, hint: hint);

  String nickname({dynamic hint}) =>
      RustLib.instance.api.contactNickname(that: this, hint: hint);

  String peerId({dynamic hint}) =>
      RustLib.instance.api.contactPeerId(that: this, hint: hint);

  Contact pubClone({dynamic hint}) =>
      RustLib.instance.api.contactPubClone(that: this, hint: hint);

  void setNickname({required String nickname, dynamic hint}) =>
      RustLib.instance.api
          .contactSetNickname(that: this, nickname: nickname, hint: hint);
}
