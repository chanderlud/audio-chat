// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'audio_chat.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<SoundHandle>>
@sealed
class SoundHandle extends RustOpaque {
  SoundHandle.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  SoundHandle.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SoundHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SoundHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SoundHandlePtr,
  );

  void cancel({dynamic hint}) => RustLib.instance.api.soundHandleCancel(
        that: this,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<SoundPlayer>>
@sealed
class SoundPlayer extends RustOpaque {
  SoundPlayer.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  SoundPlayer.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SoundPlayer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SoundPlayer,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SoundPlayerPtr,
  );

  ArcHost host({dynamic hint}) => RustLib.instance.api.soundPlayerHost(
        that: this,
      );

  factory SoundPlayer({required double outputVolume, dynamic hint}) =>
      RustLib.instance.api
          .soundPlayerNew(outputVolume: outputVolume, hint: hint);

  /// Public play function
  Future<SoundHandle> play({required List<int> bytes, dynamic hint}) =>
      RustLib.instance.api.soundPlayerPlay(
        that: this,
        bytes: bytes,
      );

  Future<void> updateOutputDevice({String? name, dynamic hint}) =>
      RustLib.instance.api.soundPlayerUpdateOutputDevice(
        that: this,
        name: name,
      );

  void updateOutputVolume({required double volume, dynamic hint}) =>
      RustLib.instance.api.soundPlayerUpdateOutputVolume(
        that: this,
        volume: volume,
      );
}
