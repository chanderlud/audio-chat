// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'contact.dart';
import 'error.dart';
import 'overlay/overlay.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `CachedAtomicFlag` is not used by any `pub` functions, thus it is ignored.
// The type `CachedAtomicFloat` is not used by any `pub` functions, thus it is ignored.
// The type `ConnectionState` is not used by any `pub` functions, thus it is ignored.
// The type `PeerState` is not used by any `pub` functions, thus it is ignored.
// The type `ProcessorMessage` is not used by any `pub` functions, thus it is ignored.
// The type `SendStream` is not used by any `pub` functions, thus it is ignored.
// The type `SessionState` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Host >>>
@sealed
class ArcHost extends RustOpaque {
  ArcHost.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  ArcHost.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcHost,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcHost,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcHostPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioChat>>
@sealed
class AudioChat extends RustOpaque {
  AudioChat.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  AudioChat.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioChat,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioChat,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioChatPtr,
  );

  /// Blocks while an audio test is running
  Future<void> audioTest({dynamic hint}) => RustLib.instance.api
      .crateApiAudioChatAudioChatAudioTest(that: this, hint: hint);

  Future<ChatMessage> buildChat(
          {required Contact contact, required String text, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatBuildChat(
          that: this, contact: contact, text: text, hint: hint);

  /// Ends the call (if there is one)
  void endCall({dynamic hint}) => RustLib.instance.api
      .crateApiAudioChatAudioChatEndCall(that: this, hint: hint);

  /// Lists the input and output devices
  Future<(List<String>, List<String>)> listDevices({dynamic hint}) =>
      RustLib.instance.api
          .crateApiAudioChatAudioChatListDevices(that: this, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<AudioChat> newInstance(
          {required List<int> identity,
          required ArcHost host,
          required NetworkConfig networkConfig,
          required Overlay overlay,
          required FutureOr<bool> Function(String, Uint8List?, DartNotify)
              acceptCall,
          required FutureOr<void> Function(String, bool) callEnded,
          required FutureOr<Contact?> Function(Uint8List) getContact,
          required FutureOr<void> Function() connected,
          required FutureOr<void> Function(bool) callState,
          required FutureOr<void> Function(String, String) sessionStatus,
          required FutureOr<void> Function(AudioChat) startSessions,
          required FutureOr<Uint8List?> Function() loadRingtone,
          required FutureOr<void> Function(Statistics) statistics,
          required FutureOr<void> Function(ChatMessage) messageReceived,
          required FutureOr<void> Function(bool, bool) managerActive,
          required FutureOr<void> Function(Contact) callStarted,
          dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatNew(
          identity: identity,
          host: host,
          networkConfig: networkConfig,
          overlay: overlay,
          acceptCall: acceptCall,
          callEnded: callEnded,
          getContact: getContact,
          connected: connected,
          callState: callState,
          sessionStatus: sessionStatus,
          startSessions: startSessions,
          loadRingtone: loadRingtone,
          statistics: statistics,
          messageReceived: messageReceived,
          managerActive: managerActive,
          callStarted: callStarted,
          hint: hint);

  /// Restarts the session manager
  Future<void> restartManager({dynamic hint}) => RustLib.instance.api
      .crateApiAudioChatAudioChatRestartManager(that: this, hint: hint);

  /// Attempts to start a call through an existing session
  Future<void> sayHello({required Contact contact, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSayHello(
          that: this, contact: contact, hint: hint);

  /// Sends a chat message
  Future<void> sendChat({required ChatMessage message, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSendChat(
          that: this, message: message, hint: hint);

  void setDeafened({required bool deafened, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSetDeafened(
          that: this, deafened: deafened, hint: hint);

  /// Changing the denoise flag will not affect the current call
  void setDenoise({required bool denoise, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSetDenoise(
          that: this, denoise: denoise, hint: hint);

  /// Sets the signing key (called when the profile changes)
  Future<void> setIdentity({required List<int> key, dynamic hint}) => RustLib
      .instance.api
      .crateApiAudioChatAudioChatSetIdentity(that: this, key: key, hint: hint);

  Future<void> setInputDevice({String? device, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSetInputDevice(
          that: this, device: device, hint: hint);

  void setInputVolume({required double decibel, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSetInputVolume(
          that: this, decibel: decibel, hint: hint);

  Future<void> setModel({required List<int> model, dynamic hint}) => RustLib
      .instance.api
      .crateApiAudioChatAudioChatSetModel(that: this, model: model, hint: hint);

  void setMuted({required bool muted, dynamic hint}) => RustLib.instance.api
      .crateApiAudioChatAudioChatSetMuted(that: this, muted: muted, hint: hint);

  Future<void> setOutputDevice({String? device, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSetOutputDevice(
          that: this, device: device, hint: hint);

  void setOutputVolume({required double decibel, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSetOutputVolume(
          that: this, decibel: decibel, hint: hint);

  void setPlayCustomRingtones({required bool play, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSetPlayCustomRingtones(
          that: this, play: play, hint: hint);

  void setRmsThreshold({required double decimal, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatSetRmsThreshold(
          that: this, decimal: decimal, hint: hint);

  /// Tries to start a session for a contact
  Future<void> startSession({required Contact contact, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatStartSession(
          that: this, contact: contact, hint: hint);

  /// Stops a specific session (called when a contact is deleted)
  Future<void> stopSession({required Contact contact, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatAudioChatStopSession(
          that: this, contact: contact, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChatMessage>>
@sealed
class ChatMessage extends RustOpaque {
  ChatMessage.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ChatMessage.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ChatMessage,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChatMessage,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChatMessagePtr,
  );

  String get text => RustLib.instance.api.crateApiAudioChatChatMessageGetText(
        that: this,
      );

  bool isSender({required String identity, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatChatMessageIsSender(
          that: this, identity: identity, hint: hint);

  void set text(String text) => RustLib.instance.api
      .crateApiAudioChatChatMessageSetText(that: this, text: text);

  String time({dynamic hint}) => RustLib.instance.api
      .crateApiAudioChatChatMessageTime(that: this, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartNotify>>
@sealed
class DartNotify extends RustOpaque {
  DartNotify.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  DartNotify.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DartNotify,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DartNotify,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DartNotifyPtr,
  );

  /// public notified function for dart
  Future<void> notified({dynamic hint}) => RustLib.instance.api
      .crateApiAudioChatDartNotifyNotified(that: this, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NetworkConfig>>
@sealed
class NetworkConfig extends RustOpaque {
  NetworkConfig.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NetworkConfig.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NetworkConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NetworkConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NetworkConfigPtr,
  );

  Future<String> getRelayAddress({dynamic hint}) => RustLib.instance.api
      .crateApiAudioChatNetworkConfigGetRelayAddress(that: this, hint: hint);

  Future<String> getRelayId({dynamic hint}) => RustLib.instance.api
      .crateApiAudioChatNetworkConfigGetRelayId(that: this, hint: hint);

  factory NetworkConfig(
          {required String relayAddress,
          required String relayId,
          dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatNetworkConfigNew(
          relayAddress: relayAddress, relayId: relayId, hint: hint);

  Future<void> setRelayAddress({required String relayAddress, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatNetworkConfigSetRelayAddress(
          that: this, relayAddress: relayAddress, hint: hint);

  Future<void> setRelayId({required String relayId, dynamic hint}) =>
      RustLib.instance.api.crateApiAudioChatNetworkConfigSetRelayId(
          that: this, relayId: relayId, hint: hint);
}

/// processed statistics for the frontend
class Statistics {
  /// a percentage of the max input volume in the window
  final double inputLevel;

  /// a percentage of the max output volume in the window
  final double outputLevel;

  /// the current call latency
  final BigInt latency;

  /// the approximate upload bandwidth used by the current call
  final BigInt uploadBandwidth;

  /// the approximate download bandwidth used by the current call
  final BigInt downloadBandwidth;

  /// a value between 0 and 1 representing the percent of audio lost in a sliding window
  final double loss;

  const Statistics({
    required this.inputLevel,
    required this.outputLevel,
    required this.latency,
    required this.uploadBandwidth,
    required this.downloadBandwidth,
    required this.loss,
  });

  @override
  int get hashCode =>
      inputLevel.hashCode ^
      outputLevel.hashCode ^
      latency.hashCode ^
      uploadBandwidth.hashCode ^
      downloadBandwidth.hashCode ^
      loss.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Statistics &&
          runtimeType == other.runtimeType &&
          inputLevel == other.inputLevel &&
          outputLevel == other.outputLevel &&
          latency == other.latency &&
          uploadBandwidth == other.uploadBandwidth &&
          downloadBandwidth == other.downloadBandwidth &&
          loss == other.loss;
}
