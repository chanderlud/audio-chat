// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Stream<String> createLogStream({dynamic hint}) =>
    RustLib.instance.api.createLogStream(hint: hint);

void rustSetUp({dynamic hint}) => RustLib.instance.api.rustSetUp(hint: hint);

U8Array64 generateKeys({dynamic hint}) =>
    RustLib.instance.api.generateKeys(hint: hint);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<AudioChat>>
@sealed
class AudioChat extends RustOpaque {
  AudioChat.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  AudioChat.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioChat,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioChat,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioChatPtr,
  );

  /// Ends the call (if there is one)
  Future<void> endCall({dynamic hint}) => RustLib.instance.api.audioChatEndCall(
        that: this,
      );

  /// Lists the input and output devices
  (List<String>, List<String>) listDevices({dynamic hint}) =>
      RustLib.instance.api.audioChatListDevices(
        that: this,
      );

  static Future<AudioChat> newAudioChat(
          {required int listenPort,
          required int receivePort,
          required List<int> signingKey,
          required double rmsThreshold,
          required double inputVolume,
          required double outputVolume,
          required FutureOr<bool> Function(Contact) acceptCall,
          required FutureOr<void> Function(String) callEnded,
          required FutureOr<Contact?> Function(String) getContact,
          required FutureOr<void> Function() connected,
          dynamic hint}) =>
      RustLib.instance.api.audioChatNew(
          listenPort: listenPort,
          receivePort: receivePort,
          signingKey: signingKey,
          rmsThreshold: rmsThreshold,
          inputVolume: inputVolume,
          outputVolume: outputVolume,
          acceptCall: acceptCall,
          callEnded: callEnded,
          getContact: getContact,
          connected: connected,
          hint: hint);

  /// Restarts the listener
  Future<void> restartListener({dynamic hint}) =>
      RustLib.instance.api.audioChatRestartListener(
        that: this,
      );

  /// The public say_hello function
  Future<bool> sayHello({required Contact contact, dynamic hint}) =>
      RustLib.instance.api.audioChatSayHello(
        that: this,
        contact: contact,
      );

  void setDeafened({required bool deafened, dynamic hint}) =>
      RustLib.instance.api.audioChatSetDeafened(
        that: this,
        deafened: deafened,
      );

  void setInputVolume({required double decibel, dynamic hint}) =>
      RustLib.instance.api.audioChatSetInputVolume(
        that: this,
        decibel: decibel,
      );

  void setListenPort({required int port, dynamic hint}) =>
      RustLib.instance.api.audioChatSetListenPort(
        that: this,
        port: port,
      );

  void setMuted({required bool muted, dynamic hint}) =>
      RustLib.instance.api.audioChatSetMuted(
        that: this,
        muted: muted,
      );

  void setOutputVolume({required double decibel, dynamic hint}) =>
      RustLib.instance.api.audioChatSetOutputVolume(
        that: this,
        decibel: decibel,
      );

  void setReceivePort({required int port, dynamic hint}) =>
      RustLib.instance.api.audioChatSetReceivePort(
        that: this,
        port: port,
      );

  void setRmsThreshold({required double decimal, dynamic hint}) =>
      RustLib.instance.api.audioChatSetRmsThreshold(
        that: this,
        decimal: decimal,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Contact>>
@sealed
class Contact extends RustOpaque {
  Contact.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Contact.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Contact,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Contact,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContactPtr,
  );

  String addressStr({dynamic hint}) => RustLib.instance.api.contactAddressStr(
        that: this,
      );

  bool equals({required Contact other, dynamic hint}) =>
      RustLib.instance.api.contactEquals(
        that: this,
        other: other,
      );

  String id({dynamic hint}) => RustLib.instance.api.contactId(
        that: this,
      );

  String ipStr({dynamic hint}) => RustLib.instance.api.contactIpStr(
        that: this,
      );

  static Contact newContact(
          {required String nickname,
          required String verifyingKey,
          required String address,
          dynamic hint}) =>
      RustLib.instance.api.contactNew(
          nickname: nickname,
          verifyingKey: verifyingKey,
          address: address,
          hint: hint);

  String nickname({dynamic hint}) => RustLib.instance.api.contactNickname(
        that: this,
      );

  static Contact parse({required String s, dynamic hint}) =>
      RustLib.instance.api.contactParse(s: s, hint: hint);

  Contact pubClone({dynamic hint}) => RustLib.instance.api.contactPubClone(
        that: this,
      );

  void setAddress({required String address, dynamic hint}) =>
      RustLib.instance.api.contactSetAddress(
        that: this,
        address: address,
      );

  void setNickname({required String nickname, dynamic hint}) =>
      RustLib.instance.api.contactSetNickname(
        that: this,
        nickname: nickname,
      );

  String store({dynamic hint}) => RustLib.instance.api.contactStore(
        that: this,
      );

  Uint8List verifyingKey({dynamic hint}) =>
      RustLib.instance.api.contactVerifyingKey(
        that: this,
      );

  String verifyingKeyStr({dynamic hint}) =>
      RustLib.instance.api.contactVerifyingKeyStr(
        that: this,
      );
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array64(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array64.init() : this(Uint8List(arraySize));
}
