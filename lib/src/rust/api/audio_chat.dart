// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<AudioChat>>
@sealed
class AudioChat extends RustOpaque {
  AudioChat.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  AudioChat.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioChat,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioChat,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioChatPtr,
  );

  /// The public add_contact function
  Future<void> addContact({required String contact, dynamic hint}) =>
      RustLib.instance.api.audioChatAddContact(
        that: this,
        contact: contact,
      );

  /// Ends the call (if there is one)
  Future<void> endCall({dynamic hint}) => RustLib.instance.api.audioChatEndCall(
        that: this,
      );

  /// Lists the input and output devices
  Future<(List<String>, List<String>)> listDevices({dynamic hint}) =>
      RustLib.instance.api.audioChatListDevices(
        that: this,
      );

  static Future<AudioChat> newAudioChat(
          {required int listenPort, required int receivePort, dynamic hint}) =>
      RustLib.instance.api.audioChatNew(
          listenPort: listenPort, receivePort: receivePort, hint: hint);

  /// The public say_hello function
  Future<void> sayHello({required String address, dynamic hint}) =>
      RustLib.instance.api.audioChatSayHello(
        that: this,
        address: address,
      );
}
