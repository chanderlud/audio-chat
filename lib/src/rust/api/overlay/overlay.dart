// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Overlay>>
@sealed
class Overlay extends RustOpaque {
  Overlay.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Overlay.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Overlay,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Overlay,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OverlayPtr,
  );

  Future<void> disable({dynamic hint}) => RustLib.instance.api
      .crateApiOverlayOverlayOverlayDisable(that: this, hint: hint);

  Future<void> enable({dynamic hint}) => RustLib.instance.api
      .crateApiOverlayOverlayOverlayEnable(that: this, hint: hint);

  /// hide the overlay window irrespective of platform
  Future<void> hide({dynamic hint}) => RustLib.instance.api
      .crateApiOverlayOverlayOverlayHide(that: this, hint: hint);

  /// move and resize the overlay window
  Future<void> moveOverlay(
          {required int x,
          required int y,
          required int width,
          required int height,
          dynamic hint}) =>
      RustLib.instance.api.crateApiOverlayOverlayOverlayMoveOverlay(
          that: this, x: x, y: y, width: width, height: height, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Overlay> newInstance(
          {required bool enabled,
          required int x,
          required int y,
          required int width,
          required int height,
          required int fontHeight,
          required int backgroundColor,
          required int fontColor,
          dynamic hint}) =>
      RustLib.instance.api.crateApiOverlayOverlayOverlayNew(
          enabled: enabled,
          x: x,
          y: y,
          width: width,
          height: height,
          fontHeight: fontHeight,
          backgroundColor: backgroundColor,
          fontColor: fontColor,
          hint: hint);

  (int, int) screenResolution({dynamic hint}) => RustLib.instance.api
      .crateApiOverlayOverlayOverlayScreenResolution(that: this, hint: hint);

  /// change the background color of the overlay
  Future<void> setBackgroundColor(
          {required int backgroundColor, dynamic hint}) =>
      RustLib.instance.api.crateApiOverlayOverlayOverlaySetBackgroundColor(
          that: this, backgroundColor: backgroundColor, hint: hint);

  /// change the font color of the overlay
  Future<void> setFontColor({required int fontColor, dynamic hint}) =>
      RustLib.instance.api.crateApiOverlayOverlayOverlaySetFontColor(
          that: this, fontColor: fontColor, hint: hint);

  /// change the font height (size) of the overlay
  Future<void> setFontHeight({required int height, dynamic hint}) =>
      RustLib.instance.api.crateApiOverlayOverlayOverlaySetFontHeight(
          that: this, height: height, hint: hint);

  /// show the overlay window irrespective of platform
  Future<void> show({dynamic hint}) => RustLib.instance.api
      .crateApiOverlayOverlayOverlayShow(that: this, hint: hint);
}
