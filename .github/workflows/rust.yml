name: Rust

on:
  push:
    branches: [ master ]
    tags: "*"
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  FRB_MAIN_RUST_VERSION: 1.84.0
  FRB_MAIN_DART_VERSION: 3.6.2
  FRB_MAIN_FLUTTER_VERSION: 3.27.4

jobs:
  testing:
    runs-on: ${{ matrix.info.image }}

    strategy:
      fail-fast: false
      matrix:
        info:
          - image: windows-2019
            target: x86_64-pc-windows-msvc
          - image: macos-13
            target: aarch64-apple-darwin
          - image: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - image: ubuntu-latest
            target: aarch64-linux-android
          - image: macos-13
            target: aarch64-apple-ios

    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Linux Prerequisites
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev libasound2-dev

      - name: Setup Android SDK
        if: matrix.info.target == 'aarch64-linux-android'
        uses: android-actions/setup-android@v3

      - uses: nttld/setup-ndk@v1
        if: matrix.info.target == 'aarch64-linux-android'
        id: setup-ndk
        with:
          ndk-version: r26d
          link-to-sdk: true

      - name: test
        if: matrix.info.target == 'aarch64-linux-android'
        run: echo "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      #      - uses: subosito/flutter-action@v2
#        with:
#          cache: true
#          flutter-version: ${{ env.FRB_MAIN_FLUTTER_VERSION }}
#          architecture: x64

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
          target: ${{ matrix.info.target }}
          cache: false

      - name: Check formatting
        run: cd rust && cargo fmt -- --check

      - name: Build
        run: cd rust && cargo build --verbose --target ${{ matrix.info.target }}

#      - name: Create Release (Windows)
#        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest'
#        run: |
#          cargo build --release
#          mv target/release/giga_grabber.exe target/release/giga_grabber_${{ matrix.os }}.exe
#
#      - name: Create Release (Non-Windows)
#        if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-latest'
#        run: |
#          cargo build --release
#          mv target/release/giga_grabber target/release/giga_grabber_${{ matrix.os }}
#
#      - name: Upload Release (Windows)
#        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest'
#        uses: actions/upload-artifact@v4
#        with:
#          name: giga_grabber_${{ matrix.os }}
#          path: target/release/giga_grabber_${{ matrix.os }}.exe
#
#      - name: Upload Release (Non-Windows)
#        if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-latest'
#        uses: actions/upload-artifact@v4
#        with:
#          name: giga_grabber_${{ matrix.os }}
#          path: target/release/giga_grabber_${{ matrix.os }}
