name: Rust

on:
  push:
    branches: [ master ]
    tags: "*"
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test_rust:
    runs-on: ${{ matrix.info.image }}

    strategy:
      fail-fast: false

      matrix:
        info:
          - image: windows-2019
            target: x86_64-pc-windows-msvc
          - image: macos-13
            target: aarch64-apple-darwin
          - image: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - image: ubuntu-latest
            target: aarch64-linux-android
          - image: macos-13
            target: aarch64-apple-ios

    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Linux Prerequisites
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev libasound2-dev

      - name: Setup Android SDK
        if: matrix.info.target == 'aarch64-linux-android'
        uses: android-actions/setup-android@v3

      - uses: nttld/setup-ndk@v1
        if: matrix.info.target == 'aarch64-linux-android'
        id: setup-ndk
        with:
          ndk-version: r26d
          link-to-sdk: true

      - name: Set up NDK
        if: matrix.info.target == 'aarch64-linux-android'
        run: |
          export TARGET_TRIPLE="aarch64-linux-android"
          export TARGET_API="26"
          echo "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          echo "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/$TARGET_API/$TARGET_TRIPLE" >> $GITHUB_PATH

      - name: Configure Rust for Android
        if: matrix.info.target == 'aarch64-linux-android'
        run: |
          export TARGET=aarch64-linux-android
          export NDK_PATH="${{ steps.setup-ndk.outputs.ndk-path }}"
          export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android26-clang++"
          export RUSTFLAGS="-L $NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/$TARGET_API/$TARGET/"
      
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER" >> $GITHUB_ENV
          echo "RUSTFLAGS=$RUSTFLAGS" >> $GITHUB_ENV

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
          target: ${{ matrix.info.target }}
          cache: false

      - name: Check formatting
        run: cd rust && cargo fmt -- --check

      - name: Lint with Clippy
        if: matrix.info.target != 'aarch64-linux-android'
        run: cd rust && cargo clippy -- -D warnings

      - name: Build
        run: cd rust && cargo build --verbose --target ${{ matrix.info.target }}

  build_flutter:
    runs-on: ${{ matrix.info.image }}

    strategy:
      fail-fast: false

      matrix:
        info:
          - image: windows-2019
            target: windows
          - image: macos-13
            target: macos
          - image: ubuntu-latest
            target: linux
          - image: windows-2019
            target: apk
          - image: macos-13
            target: ios

    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Linux Prerequisites
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev libasound2-dev libsecret-1-dev

      - name: Set up Java 11
        if: matrix.info.target == 'apk'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Verify Java Version
        if: matrix.info.target == 'apk'
        run: java -version

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: 3.29.0

      - name: Get Packages
        run: flutter pub get

      - name: Build Flutter
        run: |
          flutter build ${{ matrix.info.target }} ${{ (matrix.info.target == 'ios' || matrix.info.target == 'macos') && '--no-codesign' || '' }}
