name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test_rust:
    runs-on: ${{ matrix.info.image }}
    name: Test on ${{ matrix.info.image }} ${{ matrix.info.target }}

    strategy:
      fail-fast: true

      matrix:
        info:
          - image: windows-2019
            target: x86_64-pc-windows-msvc
          - image: macos-13
            target: aarch64-apple-darwin
          - image: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - image: ubuntu-latest
            target: aarch64-linux-android
          - image: macos-13
            target: aarch64-apple-ios

    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Linux Prerequisites
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev libasound2-dev

      - name: Setup Android SDK
        if: matrix.info.target == 'aarch64-linux-android'
        uses: android-actions/setup-android@v3

      - uses: nttld/setup-ndk@v1
        if: matrix.info.target == 'aarch64-linux-android'
        id: setup-ndk
        with:
          ndk-version: r26d
          link-to-sdk: true

      - name: Set up NDK
        if: matrix.info.target == 'aarch64-linux-android'
        run: |
          export TARGET_TRIPLE="aarch64-linux-android"
          export TARGET_API="26"
          echo "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          echo "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/$TARGET_API/$TARGET_TRIPLE" >> $GITHUB_PATH

      - name: Configure Rust for Android
        if: matrix.info.target == 'aarch64-linux-android'
        run: |
          export TARGET=aarch64-linux-android
          export NDK_PATH="${{ steps.setup-ndk.outputs.ndk-path }}"
          export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android26-clang++"
          export RUSTFLAGS="-L $NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/$TARGET_API/$TARGET/"
      
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER" >> $GITHUB_ENV
          echo "RUSTFLAGS=$RUSTFLAGS" >> $GITHUB_ENV

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
          target: ${{ matrix.info.target }}
          cache: false

      - name: Check formatting
        run: cd rust && cargo fmt -- --check

      - name: Lint with Clippy
        if: matrix.info.target != 'aarch64-linux-android'
        run: cd rust && cargo clippy -- -D warnings

      - name: Build
        run: cd rust && cargo build --verbose --target ${{ matrix.info.target }}

  build_flutter:
    runs-on: ${{ matrix.info.image }}
    name: Build on ${{ matrix.info.image }} ${{ matrix.info.target }} ${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'debug' }}

    strategy:
      fail-fast: false

      matrix:
        info:
          - image: windows-2019
            target: windows
          # - image: macos-13
          #   target: macos
          - image: ubuntu-latest
            target: linux
          - image: windows-2019
            target: apk
          - image: macos-13
            target: ios

    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: 3.29.0

      - name: Set up Java 17
        if: matrix.info.target == 'apk'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Get Packages
        run: flutter pub get

      - name: Lint Flutter
        run: flutter analyze --fatal-infos --fatal-warnings

      - name: Reinstall rustup
        if: matrix.info.target == 'ios'
        run: |
          rm -rf ~/.rustup
          brew uninstall rustup
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup target add aarch64-apple-ios
          rustup component add rust-std

      - name: Linux Prerequisites
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev libasound2-dev libsecret-1-dev

      - name: Linux Release Prerequisites
        if: runner.os == 'Linux' && startsWith(github.ref, 'refs/tags/')
        run: sudo apt-get install rpm patchelf gcc-aarch64-linux-gnu g++-aarch64-linux-gnu dpkg-cross && dart pub global activate flutter_distributor

      - name: Install the Apple certificate and provisioning profile
        if: matrix.info.target == 'macos' || matrix.info.target == 'ios'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ matrix.info.target == 'ios' && secrets.BUILD_PROVISION_PROFILE_BASE64_MOBILE || secrets.BUILD_PROVISION_PROFILE_BASE64_DESKTOP }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_EXTENSION=$([[ "${{ matrix.info.target }}" == "ios" ]] && echo "mobileprovision" || echo "provisionprofile")
          PP_PATH=$RUNNER_TEMP/build_pp.$PP_EXTENSION
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
      
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build Flutter
        if: matrix.info.target != 'linux' || !startsWith(github.ref, 'refs/tags/')
        run: flutter build ${{ matrix.info.target }} ${{ startsWith(github.ref, 'refs/tags/') && '--release' || '--debug' }}

      - name: Package deb & rpm
        if: matrix.info.target == 'linux' && startsWith(github.ref, 'refs/tags/')
        run: |
          flutter_distributor release --name=distribution --jobs=release-distribution-linux-deb,release-distribution-linux-rpm
          mv dist/*/audio_chat-*-linux.deb audio-chat.deb
          mv dist/*/audio_chat-*-linux.rpm audio-chat.rpm

      - name: Compile Windows Installer
        if: matrix.info.target == 'windows' && startsWith(github.ref, 'refs/tags/')
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: windows/installer.iss
      - name: Move Windows Installer
        if: matrix.info.target == 'windows' && startsWith(github.ref, 'refs/tags/')
        run: mv windows/Output/audio_chat_installer.exe audio-chat-windows-x64.exe

      - name: Move APK
        if: matrix.info.target == 'apk'
        run: mv build/app/outputs/flutter-apk/${{ startsWith(github.ref, 'refs/tags/') && 'app-release.apk' || 'app-debug.apk' }} audio-chat.apk

      - name: Move IPA
        if: matrix.info.target == 'ios'
        run: mv build/ios/iphoneos/Runner.app audio-chat.app

      - name: Move Linux Bundle
        if: matrix.info.target == 'linux'
        run: mv build/linux/x64/${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'debug' }}/bundle audio-chat

      - name: Move Windows Bundle
        if: matrix.info.target == 'windows'
        run: mv build/windows/x64/runner/${{ startsWith(github.ref, 'refs/tags/') && 'Release' || 'Debug' }} audio-chat

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio_chat_${{ matrix.info.target }}
          path: |
            audio-chat.apk
            audio-chat
            audio-chat.app
            audio-chat-windows-x64.exe
            audio-chat.deb
            audio-chat.rpm
          if-no-files-found: ignore

  build_cross:
    runs-on: ubuntu-22.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu22.04
          - arch: riscv64
            distro: ubuntu22.04

    steps:
      - uses: actions/checkout@v4

      - name: Build artifact
        uses: uraimo/run-on-arch-action@v3
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ secrets.GHCR_PAT }}
          shell: /bin/bash

          setup: |
            mkdir -p "${PWD}/artifacts"

          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          install: |
            case "${{ matrix.distro }}" in
              ubuntu*)
                apt-get update -q -y
                apt-get install -q -y protobuf-compiler clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev libasound2-dev libsecret-1-dev rpm patchelf dpkg-cross curl unzip
                
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                git clone --depth 1 --branch stable https://github.com/flutter/flutter.git /flutter
                
                case "${{ matrix.arch }}" in
                  aarch64)
                    apt-get install -q -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
                    ;;
                  riscv64)
                    ls /usr/bin/riscv64-linux-gnu*
                    apt-get install -q -y python3 xz-utils gcc-10 g++-10
                    ls /usr/bin/riscv64-linux-gnu*
            
                    update-alternatives --install /usr/bin/riscv64-linux-gnu-gcc riscv64-linux-gnu-gcc /usr/bin/riscv64-linux-gnu-gcc-10 100
                    update-alternatives --install /usr/bin/riscv64-linux-gnu-g++ riscv64-linux-gnu-g++ /usr/bin/riscv64-linux-gnu-g++-10 100
                    update-alternatives --config riscv64-linux-gnu-gcc
                    update-alternatives --config riscv64-linux-gnu-g++

                    riscv64-linux-gnu-g++ --version            
                      
                    # build dart sdk for riscv
                    git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
                    export PATH="$PATH:$PWD/depot_tools"
                    mkdir dart-sdk
                    cd dart-sdk
                    fetch dart
                    cd sdk
                    ./tools/build.py --mode release --arch riscv64 --no-clang create_sdk
                    mkdir /flutter/bin/cache
                    mv out/Release*/dart-sdk /flutter/bin/cache/dart-sdk
                    ;;
                esac
                
                /flutter/bin/flutter --version # triggers flutter initialization
                /flutter/bin/cache/dart-sdk/bin/dart pub global activate flutter_distributor
                ;;
            esac

          run: |
            export PATH="$PATH:/flutter/bin"
            export PATH="$PATH":"$HOME/.pub-cache/bin"
            flutter_distributor release --name=distribution --jobs=release-distribution-linux-deb,release-distribution-linux-rpm
            mv dist/*/audio_chat-*-linux.deb /artifacts/audio-chat.deb
            mv dist/*/audio_chat-*-linux.rpm /artifacts/audio-chat.rpm

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio_chat_${{ matrix.distro }}_${{ matrix.arch }}
          path: artifacts
