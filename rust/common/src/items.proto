syntax = "proto2";

package common.items;

// Verifies the clients identity
message Identity {
  // A nonce with timestamp
  required bytes nonce = 1;

  // The client's signature of the nonce
  required bytes signature = 2;

  // The client's public key
  required bytes public_key = 3;
}

// Requests that the match maker signal another client to start a session
message RequestSession {
  // The local username fragment
  required string ufrag = 2;

  // The local password
  required string pwd = 3;
}

// Returned by the server after a RequestSession message
message RequestOutcome {
  required bool success = 2;

  optional string reason = 3;

  optional string ufrag = 4;

  optional string pwd = 5;
}

// A candidate for the ICE protocol
message Candidate {
  // A marshalled ICE candidate
  required string candidate = 2;
}

// Signals the end of a session
message EndSession {
  required string reason = 1;
}

// An error which originates on the server
message ServerError {
  required string message = 1;
}

message Ping {}

message Message {
  required bytes to = 1;
  required bytes from = 2;

  oneof message {
    RequestSession request_session = 3;
    RequestOutcome request_outcome = 4;
    Candidate candidate = 5;
    EndSession end_session = 6;
    ServerError server_error = 7;
    Ping ping = 8;
  }
}