syntax = "proto2";

package audio_chat.items;

// The specification for the audio data
message AudioHeader {
  required uint32 channels = 1;
  required uint32 sample_rate = 2;
  required string sample_format = 3;
}

// Signals that one client wants to start a call
message Hello {
  required bytes ringtone = 1;
}

// Signals that the other client has accepted the call
message HelloAck {}

// Signals that the client does not want to start a call
message Reject {}

// Signals that the client is already in a call or audio test
message Busy {}

// Alerts the client that the call has been ended by the other party
message Goodbye {
  required string reason = 1;
}

// A chat message
message Chat {
  required string text = 1;
  repeated Attachment attachment = 2;
}

// An attachment to a chat message
message Attachment {
  required string name = 1;
  required bytes data = 2;
}

// Alerts the other client that the connection has been interrupted
message ConnectionInterrupted {}

// Alerts the other client that the connection has been restored
message ConnectionRestored {}

// A message used to keep the connection active
message KeepAlive {}

// Messages used by controllers
message Message {
  oneof message {
    Hello hello = 1;
    HelloAck hello_ack = 2;
    Reject reject = 3;
    Busy busy = 4;
    Goodbye goodbye = 5;
    Chat chat = 6;
    ConnectionInterrupted connection_interrupted = 7;
    ConnectionRestored connection_restored = 8;
    KeepAlive keep_alive = 9;
  }
}